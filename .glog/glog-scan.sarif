{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-dc50b555-5051-4798-8e8d-a4eb9147746f",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nAn \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS to communicate with external services. This can lead to sensitive data being exposed to eavesdroppers, as HTTP traffic is not encrypted. In C# applications, this vulnerability can manifest when making web requests using the `HttpClient` or similar classes without ensuring the URL is secure.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS URLs to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Security Headers**: Implement security headers to protect against various attacks.\n4. **Regular Audits**: Regularly audit your codebase for unsecured URLs and update them to use HTTPS.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C#:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        // Original unsecured URL\n        // string url = \"http://test.com\";\n\n        // Secure URL\n        string url = \"https://test.com\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseBody = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseBody);\n            }\n            catch (HttpRequestException e)\n            {\n                Console.WriteLine($\"Request error: {e.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code, ensure you have the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is typically included by default in .NET projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-e49e7a2c-d690-4e76-92e0-524c425fb0f5",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS for transmitting sensitive data. This can lead to data being intercepted by attackers, as HTTP does not encrypt the data in transit. In C# applications, this vulnerability can arise when making web requests using unsecured URLs.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **HSTS**: Implement HTTP Strict Transport Security (HSTS) to enforce the use of HTTPS.\n4. **Security Headers**: Use security headers to protect against various attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by using HTTPS:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        // Original insecure URL\n        // string url = \"http://supplementsbook.org\";\n\n        // Secure URL using HTTPS\n        string url = \"https://supplementsbook.org\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseBody = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseBody);\n            }\n            catch (HttpRequestException e)\n            {\n                Console.WriteLine($\"Request error: {e.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code, ensure you have the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET framework and does not require additional installation.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-84af365c-8bf2-4477-9b44-e375d7194562",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nAn \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS to communicate with external services. This can lead to sensitive data being exposed to eavesdroppers, as HTTP traffic is not encrypted. In C# applications, this vulnerability can manifest when making web requests using the `HttpClient` or similar classes without ensuring the URL is secure.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS URLs to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Security Headers**: Implement security headers to protect against various attacks.\n4. **Regular Audits**: Regularly audit your codebase for unsecured URLs and update them to use HTTPS.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C#:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        // Original unsecured URL\n        // string url = \"http://test.com\";\n\n        // Secure URL\n        string url = \"https://test.com\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseBody = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseBody);\n            }\n            catch (HttpRequestException e)\n            {\n                Console.WriteLine($\"Request error: {e.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code, ensure you have the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is typically included by default in .NET projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-acc24ba7-70ff-41c1-8035-b08df0150584",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS for transmitting sensitive data. This can lead to data being intercepted by attackers, as HTTP does not encrypt the data in transit. In C# applications, this vulnerability can arise when making web requests using unsecured URLs.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **HSTS**: Implement HTTP Strict Transport Security (HSTS) to enforce the use of HTTPS.\n4. **Security Headers**: Use security headers to protect against various attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by using HTTPS:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        // Original insecure URL\n        // string url = \"http://supplementsbook.org\";\n\n        // Secure URL using HTTPS\n        string url = \"https://supplementsbook.org\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseBody = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseBody);\n            }\n            catch (HttpRequestException e)\n            {\n                Console.WriteLine($\"Request error: {e.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code, ensure you have the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET framework and does not require additional installation.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-96f27959-3b7f-4a82-9d76-cd261baaa2ab",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. In C# applications, this can happen when making HTTP requests to external services without using secure protocols. This vulnerability can lead to data breaches, man-in-the-middle attacks, and other security issues.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP for all external requests to ensure data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Use Security Libraries**: Utilize libraries that enforce secure connections and provide additional security features.\n4. **Regular Updates**: Keep libraries and dependencies up to date to mitigate known vulnerabilities.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely make a request to the `stopforumspam.com` API using HTTPS in C#:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    private static readonly HttpClient client = new HttpClient();\n\n    static async Task Main()\n    {\n        try\n        {\n            // Use HTTPS instead of HTTP\n            string url = \"https://stopforumspam.com/api?ip=1.2.3.4\";\n            HttpResponseMessage response = await client.GetAsync(url);\n            response.EnsureSuccessStatusCode();\n            string responseBody = await response.Content.ReadAsStringAsync();\n            Console.WriteLine(responseBody);\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine(\"Request error: \" + e.Message);\n        }\n    }\n}\n```\n\n### Library Dependencies\n\n- `System.Net.Http`: This namespace is part of the .NET framework and does not require additional installation.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-c14e9147-c8f8-4df0-a9e7-abe64c59a15c",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nAn \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS to communicate with external services. This can lead to sensitive data being exposed to eavesdroppers, as HTTP traffic is not encrypted. In C#, this vulnerability can manifest when making web requests to services like `http://botscout.com` without using a secure connection.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Use Security Libraries**: Utilize libraries that enforce secure connections and handle certificates properly.\n4. **Regular Audits**: Conduct regular security audits to identify and fix unsecured URLs.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by switching from HTTP to HTTPS:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        using (HttpClient client = new HttpClient())\n        {\n            // Use HTTPS instead of HTTP\n            string url = \"https://botscout.com\";\n            HttpResponseMessage response = await client.GetAsync(url);\n            if (response.IsSuccessStatusCode)\n            {\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            else\n            {\n                Console.WriteLine(\"Error: Unable to reach the service.\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, ensure you have the following library dependencies:\n\n- .NET Core or .NET Framework (for `HttpClient`)\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-fec67ef8-5f2d-4063-8de8-2dd939a44e6d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-a4d1171b-4ff8-4415-a9f1-9ae20a43ac9a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-e5285ca7-7a28-4c2a-be13-b82c5430d512",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-c676efc7-7bf9-4203-9a05-dbfe351a2218",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in C# arises when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. This vulnerability is particularly concerning when dealing with sensitive information such as authentication credentials, personal data, or financial information. Using HTTP instead of HTTPS can lead to man-in-the-middle attacks, where an attacker can eavesdrop on or alter the communication between the client and server.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS for all communication between the client and server to ensure data is encrypted in transit.\n2. **Enforce HTTPS**: Configure your server to redirect all HTTP requests to HTTPS.\n3. **Certificate Management**: Ensure that your SSL/TLS certificates are valid, up-to-date, and properly configured.\n4. **Security Headers**: Implement security headers such as `Strict-Transport-Security` to enforce secure connections.\n5. **Regular Audits**: Regularly audit your codebase and server configurations to ensure compliance with security best practices.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by ensuring that all URLs use HTTPS.\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // Original insecure URL\n        // string url = \"http://example.com/api/data\";\n\n        // Secure URL using HTTPS\n        string url = \"https://example.com/api/data\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, you need the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is included by default in .NET Core and .NET Framework projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-25ffb217-b5dc-4533-9d54-e55be22a6280",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in C# arises when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. This vulnerability is particularly concerning when dealing with sensitive information such as authentication credentials, personal data, or financial information. Using HTTP instead of HTTPS can lead to man-in-the-middle attacks, where an attacker can eavesdrop on or alter the communication between the client and server.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS for all communication between the client and server to ensure data is encrypted in transit.\n2. **Enforce HTTPS**: Configure your server to redirect all HTTP requests to HTTPS.\n3. **Certificate Management**: Ensure that your SSL/TLS certificates are valid, up-to-date, and properly configured.\n4. **Security Headers**: Implement security headers such as `Strict-Transport-Security` to enforce secure connections.\n5. **Regular Audits**: Regularly audit your codebase and server configurations to ensure compliance with security best practices.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by ensuring that all URLs use HTTPS.\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // Original insecure URL\n        // string url = \"http://example.com/api/data\";\n\n        // Secure URL using HTTPS\n        string url = \"https://example.com/api/data\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, you need the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is included by default in .NET Core and .NET Framework projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-32632d10-22b5-4b49-8581-93433f389671",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in C# arises when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. This vulnerability is particularly concerning when dealing with sensitive information such as authentication credentials, personal data, or financial information. Using HTTP instead of HTTPS can lead to man-in-the-middle attacks, where an attacker can eavesdrop on or alter the communication between the client and server.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS for all communication between the client and server to ensure data is encrypted in transit.\n2. **Enforce HTTPS**: Configure your server to redirect all HTTP requests to HTTPS.\n3. **Certificate Management**: Ensure that your SSL/TLS certificates are valid, up-to-date, and properly configured.\n4. **Security Headers**: Implement security headers such as `Strict-Transport-Security` to enforce secure connections.\n5. **Regular Audits**: Regularly audit your codebase and server configurations to ensure compliance with security best practices.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by ensuring that all URLs use HTTPS.\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // Original insecure URL\n        // string url = \"http://example.com/api/data\";\n\n        // Secure URL using HTTPS\n        string url = \"https://example.com/api/data\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, you need the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is included by default in .NET Core and .NET Framework projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-54010232-e29a-4db1-ad50-122ff1c17de1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-dd3fcf30-d922-4b07-a0c5-3927130c9089",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-84af21a4-12c3-43fc-8640-46ced19874d5",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. In C# applications, this can happen when making HTTP requests to external services without using secure protocols. This vulnerability can lead to data breaches, man-in-the-middle attacks, and other security issues.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP for all external requests to ensure data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Use Security Libraries**: Utilize libraries that enforce secure connections and provide additional security features.\n4. **Regular Updates**: Keep libraries and dependencies up to date to mitigate known vulnerabilities.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely make a request to the `stopforumspam.com` API using HTTPS in C#:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    private static readonly HttpClient client = new HttpClient();\n\n    static async Task Main()\n    {\n        try\n        {\n            // Use HTTPS instead of HTTP\n            string url = \"https://stopforumspam.com/api?ip=1.2.3.4\";\n            HttpResponseMessage response = await client.GetAsync(url);\n            response.EnsureSuccessStatusCode();\n            string responseBody = await response.Content.ReadAsStringAsync();\n            Console.WriteLine(responseBody);\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine(\"Request error: \" + e.Message);\n        }\n    }\n}\n```\n\n### Library Dependencies\n\n- `System.Net.Http`: This namespace is part of the .NET framework and does not require additional installation.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-843ffcb9-e81f-486e-b5b4-d74a695f7c35",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nAn \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS to communicate with external services. This can lead to sensitive data being exposed to eavesdroppers, as HTTP traffic is not encrypted. In C#, this vulnerability can manifest when making web requests to services like `http://botscout.com` without using a secure connection.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Use Security Libraries**: Utilize libraries that enforce secure connections and handle certificates properly.\n4. **Regular Audits**: Conduct regular security audits to identify and fix unsecured URLs.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by switching from HTTP to HTTPS:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        using (HttpClient client = new HttpClient())\n        {\n            // Use HTTPS instead of HTTP\n            string url = \"https://botscout.com\";\n            HttpResponseMessage response = await client.GetAsync(url);\n            if (response.IsSuccessStatusCode)\n            {\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            else\n            {\n                Console.WriteLine(\"Error: Unable to reach the service.\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, ensure you have the following library dependencies:\n\n- .NET Core or .NET Framework (for `HttpClient`)\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-dc50b555-5051-4798-8e8d-a4eb9147746f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/BBCodeHelperTests.cs"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 83,
                  "endLine": 43,
                  "endColumn": 98,
                  "charOffset": 1629,
                  "charLength": 15,
                  "snippet": {
                    "text": "http://test.com",
                    "rendered": {
                      "text": "http://test.com",
                      "markdown": "`http://test.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/BBCodeHelperTests.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1629,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "https://test.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-e49e7a2c-d690-4e76-92e0-524c425fb0f5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/UrlHelperTests.cs"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 35,
                  "endLine": 41,
                  "endColumn": 61,
                  "charOffset": 1528,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://supplementsbook.org",
                    "rendered": {
                      "text": "http://supplementsbook.org",
                      "markdown": "`http://supplementsbook.org`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/UrlHelperTests.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1528,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://supplementsbook.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-84af365c-8bf2-4477-9b44-e375d7194562",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/BBCodeHelperTests.cs"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 101,
                  "endLine": 40,
                  "endColumn": 116,
                  "charOffset": 1482,
                  "charLength": 15,
                  "snippet": {
                    "text": "http://test.com",
                    "rendered": {
                      "text": "http://test.com",
                      "markdown": "`http://test.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/BBCodeHelperTests.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1482,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "https://test.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-acc24ba7-70ff-41c1-8035-b08df0150584",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/UrlHelperTests.cs"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 75,
                  "endLine": 40,
                  "endColumn": 101,
                  "charOffset": 1422,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://supplementsbook.org",
                    "rendered": {
                      "text": "http://supplementsbook.org",
                      "markdown": "`http://supplementsbook.org`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/UrlHelperTests.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1422,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://supplementsbook.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-96f27959-3b7f-4a82-9d76-cd261baaa2ab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/Pages/Admin/HostSettings.cshtml"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 12,
                  "endLine": 348,
                  "endColumn": 36,
                  "charOffset": 15793,
                  "charLength": 24,
                  "snippet": {
                    "text": "http://stopforumspam.com",
                    "rendered": {
                      "text": "http://stopforumspam.com",
                      "markdown": "`http://stopforumspam.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YetAnotherForum.NET/Pages/Admin/HostSettings.cshtml"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15793,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "https://stopforumspam.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-c14e9147-c8f8-4df0-a9e7-abe64c59a15c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/Pages/Admin/HostSettings.cshtml"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 12,
                  "endLine": 336,
                  "endColumn": 31,
                  "charOffset": 15347,
                  "charLength": 19,
                  "snippet": {
                    "text": "http://botscout.com",
                    "rendered": {
                      "text": "http://botscout.com",
                      "markdown": "`http://botscout.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YetAnotherForum.NET/Pages/Admin/HostSettings.cshtml"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15347,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "https://botscout.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-fec67ef8-5f2d-4063-8de8-2dd939a44e6d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 777,
                  "startColumn": 41,
                  "endLine": 777,
                  "endColumn": 57,
                  "charOffset": 33807,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33807,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-a4d1171b-4ff8-4415-a9f1-9ae20a43ac9a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 41,
                  "endLine": 763,
                  "endColumn": 57,
                  "charOffset": 32956,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32956,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-e5285ca7-7a28-4c2a-be13-b82c5430d512",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 42,
                  "endLine": 749,
                  "endColumn": 58,
                  "charOffset": 32179,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32179,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-c676efc7-7bf9-4203-9a05-dbfe351a2218",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 109,
                  "endLine": 613,
                  "endColumn": 123,
                  "charOffset": 25179,
                  "charLength": 14,
                  "snippet": {
                    "text": "http://|https:",
                    "rendered": {
                      "text": "http://|https:",
                      "markdown": "`http://|https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25179,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "https://|https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-25ffb217-b5dc-4533-9d54-e55be22a6280",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 109,
                  "endLine": 599,
                  "endColumn": 123,
                  "charOffset": 24309,
                  "charLength": 14,
                  "snippet": {
                    "text": "http://|https:",
                    "rendered": {
                      "text": "http://|https:",
                      "markdown": "`http://|https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24309,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "https://|https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-32632d10-22b5-4b49-8581-93433f389671",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 586,
                  "startColumn": 132,
                  "endLine": 586,
                  "endColumn": 146,
                  "charOffset": 23481,
                  "charLength": 14,
                  "snippet": {
                    "text": "http://|https:",
                    "rendered": {
                      "text": "http://|https:",
                      "markdown": "`http://|https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23481,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "https://|https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-54010232-e29a-4db1-ad50-122ff1c17de1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 42,
                  "endLine": 557,
                  "endColumn": 58,
                  "charOffset": 21703,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21703,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-dd3fcf30-d922-4b07-a0c5-3927130c9089",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 42,
                  "endLine": 542,
                  "endColumn": 58,
                  "charOffset": 20881,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20881,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-84af21a4-12c3-43fc-8640-46ced19874d5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/Areas/Forums/Pages/Admin/HostSettings.cshtml"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 12,
                  "endLine": 348,
                  "endColumn": 36,
                  "charOffset": 15793,
                  "charLength": 24,
                  "snippet": {
                    "text": "http://stopforumspam.com",
                    "rendered": {
                      "text": "http://stopforumspam.com",
                      "markdown": "`http://stopforumspam.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/Areas/Forums/Pages/Admin/HostSettings.cshtml"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15793,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "https://stopforumspam.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-843ffcb9-e81f-486e-b5b4-d74a695f7c35",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/Areas/Forums/Pages/Admin/HostSettings.cshtml"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 12,
                  "endLine": 336,
                  "endColumn": 31,
                  "charOffset": 15347,
                  "charLength": 19,
                  "snippet": {
                    "text": "http://botscout.com",
                    "rendered": {
                      "text": "http://botscout.com",
                      "markdown": "`http://botscout.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/Areas/Forums/Pages/Admin/HostSettings.cshtml"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15347,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "https://botscout.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}