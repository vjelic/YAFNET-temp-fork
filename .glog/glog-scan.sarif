{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-ccabd564-f425-49aa-8a97-4a9688b16698",
              "name": "DisabledCertificateValidation",
              "shortDescription": {
                "text": "Extend default certificate validation, but do not disable or override default rules."
              },
              "fullDescription": {
                "text": "Disabled certificate validation: Extend default certificate validation, but do not disable or override default rules."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS181865.md",
              "help": {
                "text": "Always use a valid certificate, even during testing.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS181865.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS181865.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Critical",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "error",
                "tags": [
                  "DS101155"
                ]
              }
            },
            {
              "id": "glog-f5f2dc68-3459-4572-96b4-4319493a0037",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nAn \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS to communicate with external services. This can lead to sensitive data being exposed to eavesdroppers, as HTTP traffic is not encrypted. In C# applications, this vulnerability can manifest when making web requests using the `HttpClient` or similar classes without ensuring the URL is secure.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS URLs to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Security Headers**: Implement security headers to protect against various attacks.\n4. **Regular Audits**: Regularly audit your codebase for unsecured URLs and update them to use HTTPS.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C#:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        // Original unsecured URL\n        // string url = \"http://test.com\";\n\n        // Secure URL\n        string url = \"https://test.com\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseBody = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseBody);\n            }\n            catch (HttpRequestException e)\n            {\n                Console.WriteLine($\"Request error: {e.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code, ensure you have the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is typically included by default in .NET projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-7a60ff40-5dd2-4249-b6cf-12bd82f239b0",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nAn \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS to communicate with external services. This can lead to sensitive data being exposed to eavesdroppers, as HTTP traffic is not encrypted. In C# applications, this vulnerability can manifest when making web requests using the `HttpClient` or similar classes without ensuring the URL is secure.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS URLs to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Security Headers**: Implement security headers to protect against various attacks.\n4. **Regular Audits**: Regularly audit your codebase for unsecured URLs and update them to use HTTPS.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C#:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        // Original unsecured URL\n        // string url = \"http://test.com\";\n\n        // Secure URL\n        string url = \"https://test.com\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseBody = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseBody);\n            }\n            catch (HttpRequestException e)\n            {\n                Console.WriteLine($\"Request error: {e.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code, ensure you have the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is typically included by default in .NET projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-474c8b66-c5ad-496d-b751-0be29f7086f3",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS for transmitting sensitive data. This can lead to data being intercepted by attackers, as HTTP does not encrypt the data in transit. In C# applications, this vulnerability can arise when making web requests using unsecured URLs.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **HSTS**: Implement HTTP Strict Transport Security (HSTS) to enforce the use of HTTPS.\n4. **Security Headers**: Use security headers to protect against various attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by using HTTPS:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        // Original insecure URL\n        // string url = \"http://supplementsbook.org\";\n\n        // Secure URL using HTTPS\n        string url = \"https://supplementsbook.org\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseBody = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseBody);\n            }\n            catch (HttpRequestException e)\n            {\n                Console.WriteLine($\"Request error: {e.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code, ensure you have the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET framework and does not require additional installation.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-35167f87-013b-4fc1-b9c4-5c344c757086",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This can occur if the first argument to `setTimeout` is a string that is constructed using untrusted input, as `setTimeout` will evaluate the string as JavaScript code. This vulnerability can lead to code injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Never pass a string as the first argument to `setTimeout`. Always use a function reference or an anonymous function.\n2. **Input Validation**: Validate and sanitize all inputs that could influence the behavior of `setTimeout`.\n3. **Use Strict Content Security Policy (CSP)**: Implement a CSP that disallows the use of `eval` and similar functions.\n4. **Code Review and Testing**: Regularly review code and conduct security testing to identify and mitigate potential vulnerabilities.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, ensure that `setTimeout` is not used with a string argument. The current usage is correct as it uses an anonymous function. However, ensure that any data used within the function is properly validated and sanitized.\n\n```javascript\nsetTimeout(async () => {\n  if (this._connectionState === l.Connected) {\n    try {\n      await this._sendMessage(this._cachedPingMessage);\n    } catch {\n      this._cleanupPingTimer();\n    }\n  }\n}, 1000); // Example timeout value\n```\n\n### Library Dependencies\n\nThe code snippet provided does not explicitly require any external library dependencies to execute properly. It relies on native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-3ad96f9e-d0d7-4ad3-af03-5996457a670c",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS for transmitting sensitive data. This can lead to data being intercepted by attackers, as HTTP does not encrypt the data in transit. In C# applications, this vulnerability can arise when making web requests using unsecured URLs.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **HSTS**: Implement HTTP Strict Transport Security (HSTS) to enforce the use of HTTPS.\n4. **Security Headers**: Use security headers to protect against various attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by using HTTPS:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        // Original insecure URL\n        // string url = \"http://supplementsbook.org\";\n\n        // Secure URL using HTTPS\n        string url = \"https://supplementsbook.org\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseBody = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseBody);\n            }\n            catch (HttpRequestException e)\n            {\n                Console.WriteLine($\"Request error: {e.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code, ensure you have the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET framework and does not require additional installation.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-9093ca05-643a-40d5-8ff3-cd7e6b97bea6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This can occur if user input is directly passed to `setTimeout` as a string, which is then evaluated as code. This vulnerability is particularly dangerous because it can lead to cross-site scripting (XSS) attacks, where an attacker can execute malicious scripts in the context of a user's browser session.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references or arrow functions instead of strings when using `setTimeout`.\n2. **Validate and Sanitize Input:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that provide safer alternatives to `setTimeout` and other potentially dangerous functions.\n4. **Content Security Policy (CSP):** Implement CSP headers to mitigate the impact of XSS attacks.\n\n### Source Code Fix Recommendation\n\n**Vulnerable Code:**\n\n```javascript\nsetTimeout(() => this.serverTimeout(), 1000);\n```\n\n**Fixed Code:**\n\nEnsure that the function reference is used directly without involving any untrusted data:\n\n```javascript\nsetTimeout(this.serverTimeout.bind(this), 1000);\n```\n\n### Library Dependencies\n\nThe provided code example does not require any additional library dependencies to execute properly.\n\n### Relevant Links\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links are verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-6ac11ece-6461-4097-8c9a-54baabcbd506",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability occurs because `setTimeout` can accept a string as its first argument, which is then evaluated as code. If this string is constructed using untrusted data, it can lead to code injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Always use function references instead of strings for the first argument of `setTimeout`.\n2. **Input Validation**: Validate and sanitize all inputs that could influence the behavior of `setTimeout`.\n3. **Use Libraries**: Consider using libraries that provide safer alternatives to `setTimeout`.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```javascript\n// Vulnerable code\nlet userInput = \"alert('This is unsafe!')\";\nsetTimeout(userInput, 1000);\n```\n\n#### Fixed Code\n\n```javascript\n// Fixed code\nlet userInput = \"This is safe!\";\nsetTimeout(() => {\n    console.log(userInput);\n}, 1000);\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese resources provide further insights into preventing and understanding code injection vulnerabilities in JavaScript."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-9ff8ec4e-2c22-497c-b2ee-25ef389c503d",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. In C# applications, this can happen when making HTTP requests to external services without using secure protocols. This vulnerability can lead to data breaches, man-in-the-middle attacks, and other security issues.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP for all external requests to ensure data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Use Security Libraries**: Utilize libraries that enforce secure connections and provide additional security features.\n4. **Regular Updates**: Keep libraries and dependencies up to date to mitigate known vulnerabilities.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely make a request to the `stopforumspam.com` API using HTTPS in C#:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    private static readonly HttpClient client = new HttpClient();\n\n    static async Task Main()\n    {\n        try\n        {\n            // Use HTTPS instead of HTTP\n            string url = \"https://stopforumspam.com/api?ip=1.2.3.4\";\n            HttpResponseMessage response = await client.GetAsync(url);\n            response.EnsureSuccessStatusCode();\n            string responseBody = await response.Content.ReadAsStringAsync();\n            Console.WriteLine(responseBody);\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine(\"Request error: \" + e.Message);\n        }\n    }\n}\n```\n\n### Library Dependencies\n\n- `System.Net.Http`: This namespace is part of the .NET framework and does not require additional installation.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-836dc1d3-6826-416c-83c1-3c17c62410ef",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nAn \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS to communicate with external services. This can lead to sensitive data being exposed to eavesdroppers, as HTTP traffic is not encrypted. In C#, this vulnerability can manifest when making web requests to services like `http://botscout.com` without using a secure connection.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Use Security Libraries**: Utilize libraries that enforce secure connections and handle certificates properly.\n4. **Regular Audits**: Conduct regular security audits to identify and fix unsecured URLs.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by switching from HTTP to HTTPS:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        using (HttpClient client = new HttpClient())\n        {\n            // Use HTTPS instead of HTTP\n            string url = \"https://botscout.com\";\n            HttpResponseMessage response = await client.GetAsync(url);\n            if (response.IsSuccessStatusCode)\n            {\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            else\n            {\n                Console.WriteLine(\"Error: Unable to reach the service.\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, ensure you have the following library dependencies:\n\n- .NET Core or .NET Framework (for `HttpClient`)\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-13edc6b5-b064-40de-9acb-aa28b29da4e0",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when a JavaScript application makes requests to URLs over an unencrypted HTTP connection. This can expose sensitive data to interception by attackers, leading to potential data breaches or man-in-the-middle attacks. The vulnerability is particularly concerning when dealing with sensitive information such as authentication tokens, user credentials, or personal data.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Content Security Policy (CSP)**: Implement a CSP to restrict the sources from which content can be loaded.\n3. **Secure Cookies**: Use the `Secure` and `HttpOnly` flags for cookies to prevent them from being accessed via JavaScript or transmitted over non-secure connections.\n4. **HSTS**: Implement HTTP Strict Transport Security (HSTS) to enforce secure connections to the server.\n\n### Source Code Fix Recommendation\n\nReplace the unsecured HTTP URL with a secure HTTPS URL in your JavaScript code. Here's an example:\n\n```javascript\n// Original code with unsecured URL\nfetch('http://via.placeholder.com/150')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    document.querySelector('img').src = imageObjectURL;\n  });\n\n// Fixed code with secured URL\nfetch('https://via.placeholder.com/150')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    document.querySelector('img').src = imageObjectURL;\n  });\n```\n\n### Library Dependencies\n\nThe above code example does not require any additional library dependencies to execute properly, as it uses native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-8415b33c-2186-4bc3-9067-085e8afff515",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability is particularly dangerous because `setTimeout` can execute a string of code, which can be manipulated if the input is not properly sanitized. In the provided code snippet, `setTimeout(()=>{t.abort()`, the use of `setTimeout` is not directly vulnerable unless the function or its parameters are influenced by untrusted data.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references instead of strings to avoid code injection.\n2. **Input Validation and Sanitization:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized.\n3. **Use Strict Content Security Policy (CSP):** Implement CSP headers to prevent the execution of malicious scripts.\n4. **Limit Execution Context:** Restrict the scope and permissions of the code that can be executed.\n\n### Source Code Fix Recommendation\n\nInstead of using `setTimeout` with a potentially unsafe function or data, ensure that the function is defined and controlled within the codebase:\n\n```javascript\n// Safe usage of setTimeout with a function reference\nfunction safeAbort() {\n    t.abort();\n}\n\nsetTimeout(safeAbort, 1000); // Execute after 1 second\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies solely on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-35f124dc-0d21-4423-9e70-a067754b9126",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-3545b43b-a5c1-4ac0-92f2-fb67f6d0ccd5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-6c79181e-7242-4616-9605-6fd69854828d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be exploited by an attacker to execute arbitrary code in the context of the web application.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references or arrow functions instead of strings to avoid executing arbitrary code.\n2. **Validate and Sanitize Input:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized to prevent injection of malicious code.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features to mitigate injection attacks.\n\n### Source Code Fix Recommendation\n\nFor the specific vulnerability sink:\n\n```javascript\n// Vulnerable code\nsetTimeout(() => { this.init() }, 1000);\n\n// Secure code\nsetTimeout(this.init.bind(this), 1000);\n```\n\nIn the secure code example, we use `bind` to ensure that `this.init` is called with the correct context, avoiding the need to use a string or an inline function that could be manipulated.\n\n### Library Dependencies\n\nThe provided code example does not require any additional library dependencies to execute properly.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese resources provide further information on JavaScript security best practices and common vulnerabilities."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-d7d7fcf0-3b1e-4e5a-95ec-a75bb7fea601",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. In JavaScript, `setTimeout` can accept a string as its first argument, which is then evaluated as code. This can lead to code injection vulnerabilities if the string is constructed using untrusted input.\n\nIn the provided code snippet, `setTimeout(()=>this._maybeEnableCycle())`, the use of an arrow function mitigates the risk of code injection, as the function is not constructed from a string. However, if any part of the function's logic or the data it processes is influenced by untrusted input, it could still lead to security issues.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Always use function references or arrow functions instead of strings in `setTimeout`.\n2. **Validate and Sanitize Input**: Ensure that any data used within the function is properly validated and sanitized.\n3. **Use Security Libraries**: Consider using libraries that provide additional security features, such as DOMPurify for sanitizing HTML.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\nIn the given example, the use of an arrow function is already a good practice. However, ensure that `_maybeEnableCycle` and any data it processes are secure:\n\n```javascript\nsetTimeout(() => {\n  // Ensure _maybeEnableCycle is safe and does not process untrusted data unsafely\n  this._maybeEnableCycle();\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-a6635e15-563e-4a72-9a1c-fcd2a7bcba03",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-2856b10d-3930-454f-a1fe-684ffaa65654",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This can occur if the first argument to `setTimeout` is a string that is constructed using untrusted input, as `setTimeout` will evaluate the string as JavaScript code. This vulnerability can lead to code injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Never pass a string as the first argument to `setTimeout`. Always use a function reference or an anonymous function.\n2. **Input Validation**: Validate and sanitize all inputs that could influence the behavior of `setTimeout`.\n3. **Use Strict Content Security Policy (CSP)**: Implement a CSP that disallows the use of `eval` and similar functions.\n4. **Code Review and Testing**: Regularly review code and conduct security testing to identify and mitigate potential vulnerabilities.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, ensure that `setTimeout` is not used with a string argument. The current usage is correct as it uses an anonymous function. However, ensure that any data used within the function is properly validated and sanitized.\n\n```javascript\nsetTimeout(async () => {\n  if (this._connectionState === l.Connected) {\n    try {\n      await this._sendMessage(this._cachedPingMessage);\n    } catch {\n      this._cleanupPingTimer();\n    }\n  }\n}, 1000); // Example timeout value\n```\n\n### Library Dependencies\n\nThe code snippet provided does not explicitly require any external library dependencies to execute properly. It relies on native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-87cf15de-a9ec-4144-ac47-71307fdd1907",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in C# arises when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. This vulnerability is particularly concerning when dealing with sensitive information such as authentication credentials, personal data, or financial information. Using HTTP instead of HTTPS can lead to man-in-the-middle attacks, where an attacker can eavesdrop on or alter the communication between the client and server.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS for all communication between the client and server to ensure data is encrypted in transit.\n2. **Enforce HTTPS**: Configure your server to redirect all HTTP requests to HTTPS.\n3. **Certificate Management**: Ensure that your SSL/TLS certificates are valid, up-to-date, and properly configured.\n4. **Security Headers**: Implement security headers such as `Strict-Transport-Security` to enforce secure connections.\n5. **Regular Audits**: Regularly audit your codebase and server configurations to ensure compliance with security best practices.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by ensuring that all URLs use HTTPS.\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // Original insecure URL\n        // string url = \"http://example.com/api/data\";\n\n        // Secure URL using HTTPS\n        string url = \"https://example.com/api/data\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, you need the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is included by default in .NET Core and .NET Framework projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-ef136e5e-c7af-4cd2-bf8c-9fa4edb2b6cf",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability occurs because `setTimeout` can accept a string as its first argument, which is then evaluated as code. If this string is constructed using untrusted data, it can lead to code injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Always use function references or arrow functions instead of strings when using `setTimeout`.\n2. **Validate and Sanitize Inputs**: Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized.\n3. **Use Static Analysis Tools**: Employ static analysis tools to detect potential vulnerabilities in your codebase.\n4. **Content Security Policy (CSP)**: Implement CSP headers to mitigate the risk of executing injected scripts.\n\n### Source Code Fix Recommendation\n\nGiven the specific vulnerability sink:\n\n```javascript\nsetTimeout(() => { t || R(s) });\n```\n\nEnsure that `t` and `R(s)` are safe and do not rely on untrusted data. If `R(s)` involves any untrusted input, validate and sanitize `s` before use.\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-e0c49f81-6579-45c7-b337-0a3fdae6f153",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in C# arises when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. This vulnerability is particularly concerning when dealing with sensitive information such as authentication credentials, personal data, or financial information. Using HTTP instead of HTTPS can lead to man-in-the-middle attacks, where an attacker can eavesdrop on or alter the communication between the client and server.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS for all communication between the client and server to ensure data is encrypted in transit.\n2. **Enforce HTTPS**: Configure your server to redirect all HTTP requests to HTTPS.\n3. **Certificate Management**: Ensure that your SSL/TLS certificates are valid, up-to-date, and properly configured.\n4. **Security Headers**: Implement security headers such as `Strict-Transport-Security` to enforce secure connections.\n5. **Regular Audits**: Regularly audit your codebase and server configurations to ensure compliance with security best practices.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by ensuring that all URLs use HTTPS.\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // Original insecure URL\n        // string url = \"http://example.com/api/data\";\n\n        // Secure URL using HTTPS\n        string url = \"https://example.com/api/data\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, you need the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is included by default in .NET Core and .NET Framework projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-a7d8d74c-3f36-4c02-9073-d95a850b9d7f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in C# arises when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. This vulnerability is particularly concerning when dealing with sensitive information such as authentication credentials, personal data, or financial information. Using HTTP instead of HTTPS can lead to man-in-the-middle attacks, where an attacker can eavesdrop on or alter the communication between the client and server.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS for all communication between the client and server to ensure data is encrypted in transit.\n2. **Enforce HTTPS**: Configure your server to redirect all HTTP requests to HTTPS.\n3. **Certificate Management**: Ensure that your SSL/TLS certificates are valid, up-to-date, and properly configured.\n4. **Security Headers**: Implement security headers such as `Strict-Transport-Security` to enforce secure connections.\n5. **Regular Audits**: Regularly audit your codebase and server configurations to ensure compliance with security best practices.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by ensuring that all URLs use HTTPS.\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // Original insecure URL\n        // string url = \"http://example.com/api/data\";\n\n        // Secure URL using HTTPS\n        string url = \"https://example.com/api/data\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            try\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                response.EnsureSuccessStatusCode();\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, you need the following library dependencies:\n\n- `System.Net.Http`: This is part of the .NET Standard Library and is included by default in .NET Core and .NET Framework projects.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Headers Project](https://owasp.org/www-project-secure-headers/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-04b3beef-8348-4b15-9916-a1ab8105e1f0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This can occur if user input is directly passed to `setTimeout` as a string, which is then evaluated as code. This vulnerability is particularly dangerous because it can lead to cross-site scripting (XSS) attacks, where an attacker can execute malicious scripts in the context of a user's browser session.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references or arrow functions instead of strings when using `setTimeout`.\n2. **Validate and Sanitize Input:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that provide safer alternatives to `setTimeout` and other potentially dangerous functions.\n4. **Content Security Policy (CSP):** Implement CSP headers to mitigate the impact of XSS attacks.\n\n### Source Code Fix Recommendation\n\n**Vulnerable Code:**\n\n```javascript\nsetTimeout(() => this.serverTimeout(), 1000);\n```\n\n**Fixed Code:**\n\nEnsure that the function reference is used directly without involving any untrusted data:\n\n```javascript\nsetTimeout(this.serverTimeout.bind(this), 1000);\n```\n\n### Library Dependencies\n\nThe provided code example does not require any additional library dependencies to execute properly.\n\n### Relevant Links\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links are verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-06c5a5ef-11c3-40bf-a4d5-19b84d7d3d9e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability occurs because `setTimeout` can accept a string as its first argument, which is then evaluated as code. If this string is constructed using untrusted data, it can lead to code injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Always use function references instead of strings for the first argument of `setTimeout`.\n2. **Input Validation**: Validate and sanitize all inputs that could influence the behavior of `setTimeout`.\n3. **Use Libraries**: Consider using libraries that provide safer alternatives to `setTimeout`.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```javascript\n// Vulnerable code\nlet userInput = \"alert('This is unsafe!')\";\nsetTimeout(userInput, 1000);\n```\n\n#### Fixed Code\n\n```javascript\n// Fixed code\nlet userInput = \"This is safe!\";\nsetTimeout(() => {\n    console.log(userInput);\n}, 1000);\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese resources provide further insights into preventing and understanding code injection vulnerabilities in JavaScript."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-f8c5794f-52b0-47a6-bfa6-2d232fc843f4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-7aba8f4e-7144-4b3b-ab28-ede9ed69568c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability is particularly dangerous because `setTimeout` can execute a string of code, which can be manipulated if the input is not properly sanitized. In the provided code snippet, `setTimeout(()=>{t.abort()`, the use of `setTimeout` is not directly vulnerable unless the function or its parameters are influenced by untrusted data.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references instead of strings to avoid code injection.\n2. **Input Validation and Sanitization:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized.\n3. **Use Strict Content Security Policy (CSP):** Implement CSP headers to prevent the execution of malicious scripts.\n4. **Limit Execution Context:** Restrict the scope and permissions of the code that can be executed.\n\n### Source Code Fix Recommendation\n\nInstead of using `setTimeout` with a potentially unsafe function or data, ensure that the function is defined and controlled within the codebase:\n\n```javascript\n// Safe usage of setTimeout with a function reference\nfunction safeAbort() {\n    t.abort();\n}\n\nsetTimeout(safeAbort, 1000); // Execute after 1 second\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies solely on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-1f56d904-7f54-471d-b9d1-9653a6f1eacb",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when a JavaScript application makes requests to URLs over an unencrypted HTTP connection. This can expose sensitive data to interception by attackers, leading to potential data breaches or man-in-the-middle attacks. The vulnerability is particularly concerning when dealing with sensitive information such as authentication tokens, user credentials, or personal data.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Content Security Policy (CSP)**: Implement a CSP to restrict the sources from which content can be loaded.\n3. **Secure Cookies**: Use the `Secure` and `HttpOnly` flags for cookies to prevent them from being accessed via JavaScript or transmitted over non-secure connections.\n4. **HSTS**: Implement HTTP Strict Transport Security (HSTS) to enforce secure connections to the server.\n\n### Source Code Fix Recommendation\n\nReplace the unsecured HTTP URL with a secure HTTPS URL in your JavaScript code. Here's an example:\n\n```javascript\n// Original code with unsecured URL\nfetch('http://via.placeholder.com/150')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    document.querySelector('img').src = imageObjectURL;\n  });\n\n// Fixed code with secured URL\nfetch('https://via.placeholder.com/150')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    document.querySelector('img').src = imageObjectURL;\n  });\n```\n\n### Library Dependencies\n\nThe above code example does not require any additional library dependencies to execute properly, as it uses native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-6286d5d8-55ab-4324-afef-72fc1abbb1cf",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability occurs when an application constructs URLs in an insecure manner, potentially leading to security issues such as open redirects, information leakage, or man-in-the-middle attacks. In C#, this can happen if URLs are constructed using unvalidated or untrusted input, or if the application fails to enforce HTTPS for sensitive data transmission.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Always validate and sanitize input used to construct URLs.\n2. **Enforce HTTPS**: Ensure that all sensitive data is transmitted over HTTPS.\n3. **Use Secure Libraries**: Utilize libraries that handle URL construction and validation securely.\n4. **Avoid Open Redirects**: Do not allow user input to dictate redirection URLs without proper validation.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely construct a URL in C#:\n\n```csharp\nusing System;\nusing System.Web;\n\npublic class SecureUrlExample\n{\n    public static void Main(string[] args)\n    {\n        string userInput = \"/user/profile\"; // Example of user input\n        string baseUrl = \"https://example.com\";\n\n        // Validate and sanitize user input\n        if (!Uri.IsWellFormedUriString(userInput, UriKind.Relative))\n        {\n            throw new ArgumentException(\"Invalid URL path.\");\n        }\n\n        // Construct the full URL securely\n        UriBuilder uriBuilder = new UriBuilder(baseUrl)\n        {\n            Path = userInput\n        };\n\n        Uri secureUrl = uriBuilder.Uri;\n\n        Console.WriteLine(\"Secure URL: \" + secureUrl);\n    }\n}\n```\n\n### Library Dependencies\n\n- `System`\n- `System.Web` (for web applications)\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-f00c4a3a-4b13-4922-9eca-2ab4fa3324d2",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when an application uses URLs that are not secured with HTTPS, potentially exposing sensitive data to interception or tampering by attackers. In C# applications, this can happen when making HTTP requests to external services without using secure protocols. This vulnerability can lead to data breaches, man-in-the-middle attacks, and other security issues.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP for all external requests to ensure data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Use Security Libraries**: Utilize libraries that enforce secure connections and provide additional security features.\n4. **Regular Updates**: Keep libraries and dependencies up to date to mitigate known vulnerabilities.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to securely make a request to the `stopforumspam.com` API using HTTPS in C#:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    private static readonly HttpClient client = new HttpClient();\n\n    static async Task Main()\n    {\n        try\n        {\n            // Use HTTPS instead of HTTP\n            string url = \"https://stopforumspam.com/api?ip=1.2.3.4\";\n            HttpResponseMessage response = await client.GetAsync(url);\n            response.EnsureSuccessStatusCode();\n            string responseBody = await response.Content.ReadAsStringAsync();\n            Console.WriteLine(responseBody);\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine(\"Request error: \" + e.Message);\n        }\n    }\n}\n```\n\n### Library Dependencies\n\n- `System.Net.Http`: This namespace is part of the .NET framework and does not require additional installation.\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-0bbc0689-9b4c-4e40-89d4-9c30d6e199f8",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nAn \"Unsecured URL\" vulnerability occurs when an application uses HTTP instead of HTTPS to communicate with external services. This can lead to sensitive data being exposed to eavesdroppers, as HTTP traffic is not encrypted. In C#, this vulnerability can manifest when making web requests to services like `http://botscout.com` without using a secure connection.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Validate Certificates**: Ensure that SSL/TLS certificates are valid and properly configured.\n3. **Use Security Libraries**: Utilize libraries that enforce secure connections and handle certificates properly.\n4. **Regular Audits**: Conduct regular security audits to identify and fix unsecured URLs.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in C# by switching from HTTP to HTTPS:\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        using (HttpClient client = new HttpClient())\n        {\n            // Use HTTPS instead of HTTP\n            string url = \"https://botscout.com\";\n            HttpResponseMessage response = await client.GetAsync(url);\n            if (response.IsSuccessStatusCode)\n            {\n                string responseData = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(responseData);\n            }\n            else\n            {\n                Console.WriteLine(\"Error: Unable to reach the service.\");\n            }\n        }\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, ensure you have the following library dependencies:\n\n- .NET Core or .NET Framework (for `HttpClient`)\n\n### OWASP Resources\n\n- [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-966fd8b7-ca92-411e-bba4-c3fb905faaf8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be exploited by an attacker to execute arbitrary code in the context of the web application.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references or arrow functions instead of strings to avoid executing arbitrary code.\n2. **Validate and Sanitize Input:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized to prevent injection of malicious code.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features to mitigate injection attacks.\n\n### Source Code Fix Recommendation\n\nFor the specific vulnerability sink:\n\n```javascript\n// Vulnerable code\nsetTimeout(() => { this.init() }, 1000);\n\n// Secure code\nsetTimeout(this.init.bind(this), 1000);\n```\n\nIn the secure code example, we use `bind` to ensure that `this.init` is called with the correct context, avoiding the need to use a string or an inline function that could be manipulated.\n\n### Library Dependencies\n\nThe provided code example does not require any additional library dependencies to execute properly.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese resources provide further information on JavaScript security best practices and common vulnerabilities."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-bc5526ef-73f6-4801-a492-fe46f7c67550",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. In JavaScript, `setTimeout` can accept a string as its first argument, which is then evaluated as code. This can lead to code injection vulnerabilities if the string is constructed using untrusted input.\n\nIn the provided code snippet, `setTimeout(()=>this._maybeEnableCycle())`, the use of an arrow function mitigates the risk of code injection, as the function is not constructed from a string. However, if any part of the function's logic or the data it processes is influenced by untrusted input, it could still lead to security issues.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Always use function references or arrow functions instead of strings in `setTimeout`.\n2. **Validate and Sanitize Input**: Ensure that any data used within the function is properly validated and sanitized.\n3. **Use Security Libraries**: Consider using libraries that provide additional security features, such as DOMPurify for sanitizing HTML.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\nIn the given example, the use of an arrow function is already a good practice. However, ensure that `_maybeEnableCycle` and any data it processes are secure:\n\n```javascript\nsetTimeout(() => {\n  // Ensure _maybeEnableCycle is safe and does not process untrusted data unsafely\n  this._maybeEnableCycle();\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-e744605f-9520-4e70-8415-cf62d8540c7e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be exploited by an attacker to execute arbitrary code in the context of the web application.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Always use function references instead of string arguments in `setTimeout`.\n2. **Input Validation and Sanitization**: Validate and sanitize all inputs to ensure they do not contain malicious code.\n3. **Use Strict Content Security Policy (CSP)**: Implement a strict CSP to prevent the execution of unauthorized scripts.\n4. **Security Libraries**: Utilize security libraries and frameworks that help mitigate injection vulnerabilities.\n\n### Source Code Fix Recommendation\n\nFor the specific vulnerability sink `setTimeout(()=>{t||F(s)`, ensure that the function does not rely on untrusted data. Here is a safer approach:\n\n```javascript\n// Original potentially vulnerable code\nsetTimeout(() => { t || F(s) }, 1000);\n\n// Recommended fix\nconst safeFunction = () => {\n  if (!t) {\n    F(s); // Ensure 's' is sanitized and validated\n  }\n};\n\nsetTimeout(safeFunction, 1000);\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It uses native JavaScript functions.\n\n### Relevant Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links are verified to be active and accessible for anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-97ec23d0-a5d5-470f-a76a-3313f7c4e019",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluation of Untrusted Data\" vulnerability in JavaScript occurs when untrusted data is executed as code, which can lead to security risks such as code injection attacks. In the provided code snippet, the use of `eval()` with template literals that include untrusted data (`opts.lookup`, `item.name`, `item.id`, and `opts.item_template`) can lead to such vulnerabilities. This allows an attacker to execute arbitrary code if they can control any part of the input data.\n\n### General Mitigation Advice\n\n1. **Avoid `eval()`:** Refrain from using `eval()` to execute code. Instead, use safer alternatives such as functions or template engines that do not execute code.\n2. **Input Validation and Sanitization:** Ensure that all inputs are validated and sanitized to prevent malicious code from being executed.\n3. **Content Security Policy (CSP):** Implement a strong CSP to mitigate the risk of executing malicious scripts.\n4. **Use Trusted Libraries:** Utilize libraries that are well-maintained and have security features to handle dynamic content safely.\n\n### Source Code Fix Recommendation\n\nReplace the use of `eval()` with a safer alternative. For example, you can use a template engine or directly manipulate the DOM without executing code:\n\n```javascript\nconst listItem = document.createElement('li');\nlistItem.className = `mention-li-nt ${opts.lookup}`;\nlistItem.setAttribute('data-name', item.name);\nlistItem.setAttribute('data-id', item.id);\nlistItem.innerHTML = opts.item_template;\n\nif (!items.length) return hideLookup();\n$lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")}</ul>`;\n```\n\n### Library Dependencies\n\nThe provided code snippet does not explicitly require any external libraries to execute. However, if you are using a template engine or other libraries for DOM manipulation, ensure they are included in your project.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nPlease ensure that the links are accessible and valid for anonymous users."
              },
              "properties": {
                "tags": [
                  "DS189424"
                ]
              }
            },
            {
              "id": "glog-8f3ca138-33a4-4fed-9377-caa8922c18b9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `setTimeout` function in JavaScript is often used to execute a piece of code after a specified delay. However, when untrusted data is used to construct the code or the delay, it can lead to security vulnerabilities such as code injection or denial of service. This is because `setTimeout` can execute a string as code, which can be exploited if the string is constructed from untrusted input.\n\n### General Mitigation Advice\n\n1. **Avoid using strings in `setTimeout`:** Always use function references instead of strings to avoid code injection vulnerabilities.\n2. **Validate and sanitize inputs:** Ensure that any data used in constructing the delay or the function is properly validated and sanitized.\n3. **Use strict Content Security Policy (CSP):** Implement CSP headers to prevent execution of untrusted scripts.\n4. **Limit the delay:** Ensure that the delay is within a reasonable range to prevent denial of service attacks.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, ensure that the `setTimeout` function is not constructed using untrusted data. The current usage is safe as it uses a function reference. However, ensure that `_cachedPingMessage` and any other data used within the function are sanitized and validated.\n\n```javascript\nsetTimeout(async () => {\n    if (this._connectionState === HubConnectionState.Connected) {\n        try {\n            await this._sendMessage(this._cachedPingMessage);\n        } catch {\n            this._cleanupPingTimer();\n        }\n    }\n}, 1000); // Ensure the delay is a constant or a validated variable\n```\n\n### Library Dependencies\n\nThe code snippet provided does not explicitly require any external library dependencies to execute. However, it assumes the existence of certain classes and methods such as `HubConnectionState`, `_sendMessage`, and `_cleanupPingTimer`, which may be part of a larger framework or library.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nThese links are valid and accessible for anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-a76c941f-3981-4b69-802b-4f1c06986371",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability is particularly dangerous because `setTimeout` can execute a string of code, which can be manipulated if the input is not properly sanitized or validated. In the provided code example, the use of `setTimeout(() => this.serverTimeout())` does not directly show the vulnerability, but if `this.serverTimeout` or any data it relies on is influenced by untrusted input, it could lead to security issues.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an arrow function instead of a string to avoid code injection.\n2. **Input Validation and Sanitization:** Ensure that any data used within the `setTimeout` function is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that help in sanitizing and validating inputs.\n4. **Content Security Policy (CSP):** Implement CSP headers to mitigate the risk of executing malicious scripts.\n\n### Source Code Fix Recommendation\n\nInstead of using a string in `setTimeout`, use a function reference or an arrow function. Ensure that any data used is validated and sanitized.\n\n```javascript\n// Original code\nsetTimeout(() => this.serverTimeout(), 1000);\n\n// Ensure `this.serverTimeout` is a safe function and does not rely on untrusted data\nsetTimeout(() => {\n  // Validate and sanitize any data used within this function\n  this.serverTimeout();\n}, 1000);\n```\n\n### Library Dependencies\n\nThe provided code example does not require any external library dependencies to execute properly. It relies on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-325b7387-5c62-4356-b4e8-1b6c59971e2f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing for the execution of arbitrary code. This can occur if the first argument to `setTimeout` is a string that is constructed from or includes untrusted input. When `setTimeout` is used in this way, it behaves similarly to `eval`, which can lead to security vulnerabilities such as code injection.\n\n### General Mitigation Advice\n\n1. **Avoid using strings as the first argument to `setTimeout`:** Always use a function reference or an arrow function instead of a string.\n2. **Validate and sanitize inputs:** Ensure that any data used in your application is properly validated and sanitized to prevent injection attacks.\n3. **Use strict Content Security Policy (CSP):** Implement a CSP that disallows the use of `eval` and similar functions.\n4. **Review and audit code:** Regularly review and audit your codebase for instances where `setTimeout` is used with untrusted data.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, `setTimeout` is used with an arrow function, which is a safe practice. However, if there were any untrusted data being used within the function, it should be validated and sanitized. Here is a general example of how to ensure safety:\n\n```javascript\n// Example of safe usage\nsetTimeout(async () => {\n    try {\n        if (!this._reconnectInProgress) {\n            // Ensure any data used here is trusted or properly sanitized\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}, 1000); // Delay in milliseconds\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It uses native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links are valid and accessible for anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-bcef4469-69f5-4603-b8d5-e71ff65fb382",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted input\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted input, potentially allowing an attacker to execute arbitrary code. This vulnerability is particularly dangerous because `setTimeout` can execute a string of code, similar to `eval`, which can lead to code injection attacks if the input is not properly sanitized.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an arrow function instead of a string to avoid executing arbitrary code.\n2. **Input Validation and Sanitization:** Ensure that any input used in conjunction with `setTimeout` is properly validated and sanitized to prevent injection attacks.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features, such as DOMPurify, to sanitize inputs.\n4. **Content Security Policy (CSP):** Implement a strong CSP to mitigate the risk of executing malicious scripts.\n\n### Source Code Fix Recommendation\n\nInstead of using a string in `setTimeout`, use a function reference or an arrow function. Here's how you can fix the specific vulnerability sink:\n\n```javascript\nconst abortController = new AbortController();\n\n// Secure usage of setTimeout with a function reference\nsetTimeout(() => {\n    abortController.abort();\n}, 1000); // Specify the delay as needed\n```\n\n### Library Dependencies\n\nThe provided code example does not require any external library dependencies to execute properly. It uses native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-a93e2b10-69f7-4b2c-888a-a4a67af902a3",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when a JavaScript application makes requests to URLs over an unencrypted HTTP connection. This can expose sensitive data to interception by attackers, leading to potential data breaches or man-in-the-middle attacks. The vulnerability is particularly concerning when dealing with sensitive information such as authentication tokens, user credentials, or personal data.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Content Security Policy (CSP)**: Implement a CSP to restrict the sources from which content can be loaded.\n3. **Secure Cookies**: Use the `Secure` and `HttpOnly` flags for cookies to prevent them from being accessed via JavaScript or transmitted over non-secure connections.\n4. **HSTS**: Implement HTTP Strict Transport Security (HSTS) to enforce secure connections to the server.\n\n### Source Code Fix Recommendation\n\nReplace the unsecured HTTP URL with a secure HTTPS URL in your JavaScript code. Here's an example:\n\n```javascript\n// Original code with unsecured URL\nfetch('http://via.placeholder.com/150')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    document.querySelector('img').src = imageObjectURL;\n  });\n\n// Fixed code with secured URL\nfetch('https://via.placeholder.com/150')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    document.querySelector('img').src = imageObjectURL;\n  });\n```\n\n### Library Dependencies\n\nThe above code example does not require any additional library dependencies to execute properly, as it uses native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-63e669aa-93e1-4caf-bc21-e3c07774c726",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability occurs because `setTimeout` can accept a string as its first argument, which is then evaluated as code. If this string is constructed using untrusted data, it can lead to code injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an arrow function instead of a string to avoid code evaluation.\n2. **Validate and Sanitize Inputs:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that help in sanitizing and validating inputs to prevent injection attacks.\n4. **Content Security Policy (CSP):** Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, ensure that `setTimeout` is used with a function reference or an arrow function, and avoid using untrusted data directly:\n\n```javascript\nsetTimeout(() => {\n    this.init();\n}, 1000); // Specify a delay as needed\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It is a standalone JavaScript code that relies on the built-in `setTimeout` function.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-4a703889-3ae5-4574-a4d4-88ec3a33fb6d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This can occur if the first argument to `setTimeout` is a string that is constructed using untrusted input, which is then evaluated as code. This vulnerability can lead to cross-site scripting (XSS) attacks if an attacker can inject malicious scripts into the application.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Never pass a string as the first argument to `setTimeout`. Instead, use a function or an arrow function.\n2. **Input Validation and Sanitization**: Always validate and sanitize any untrusted input before using it in your application.\n3. **Content Security Policy (CSP)**: Implement a strong CSP to mitigate the impact of XSS attacks.\n4. **Use Security Libraries**: Utilize libraries that help in escaping and sanitizing data.\n\n### Source Code Fix Recommendation\n\nIn the provided code example, ensure that `setTimeout` is not used with untrusted data. The current usage is safe as it uses an arrow function:\n\n```javascript\nsetTimeout(() => {\n    this.hide();\n}, 1000); // Ensure the delay is a number and not derived from untrusted input\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It is a standalone JavaScript code that relies on the built-in `setTimeout` function.\n\n### Relevant OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nThese links are verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-ad9a4854-ada7-451e-aa3c-2011e0d29eb0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This is particularly dangerous when the first argument to `setTimeout` is a string, as it will be evaluated as code. In the provided code snippet, `setTimeout(() => this._maybeEnableCycle())`, if any part of the function or its parameters is influenced by untrusted data, it could lead to security risks.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Never pass a string as the first argument to `setTimeout`. Always use a function or an arrow function.\n2. **Validate and Sanitize Inputs**: Ensure that any data used within the function is properly validated and sanitized.\n3. **Use Strict Content Security Policy (CSP)**: Implement a CSP that disallows the use of `eval` and similar functions.\n4. **Review and Audit Code**: Regularly review and audit your code for potential security vulnerabilities.\n\n### Source Code Fix Recommendation\n\nEnsure that the function passed to `setTimeout` does not rely on untrusted data. If `this._maybeEnableCycle()` is influenced by external input, validate and sanitize that input before use.\n\n```javascript\n// Example of a safe usage\nsetTimeout(() => {\n  // Ensure that _maybeEnableCycle is safe and does not rely on untrusted data\n  this._maybeEnableCycle();\n}, 1000);\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies solely on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-d2557699-9d2a-4214-b7d4-7d18fcd7a366",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be exploited by an attacker to execute arbitrary code.\n\nIn the provided code snippet, the `setTimeout` function is used with a callback function. While this specific usage does not directly involve untrusted data, it is crucial to ensure that any data used within the callback is properly validated and sanitized to prevent potential vulnerabilities.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an anonymous function instead of a string to avoid code injection risks.\n2. **Validate and Sanitize Input:** Ensure that any data used within the `setTimeout` callback is validated and sanitized to prevent malicious code execution.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features, such as DOMPurify for sanitizing HTML.\n4. **Content Security Policy (CSP):** Implement CSP headers to restrict the sources from which scripts can be loaded and executed.\n\n### Source Code Fix Recommendation\n\nEnsure that any data used within the `setTimeout` callback is properly validated and sanitized. In this specific example, since the `setTimeout` is using a function reference, ensure that any data used within the `triggerTransitionEnd` function is safe.\n\n```javascript\nsetTimeout(() => {\n    if (!called) {\n        // Ensure transitionElement is safe and properly validated\n        triggerTransitionEnd(transitionElement);\n    }\n}, 1000); // Example timeout value\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It uses native JavaScript functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-89ce687e-c0e0-418d-b45c-d4f1e10bbbc1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This can occur if the first argument to `setTimeout` is a string that is constructed using untrusted input, which is then evaluated as code. This vulnerability can lead to cross-site scripting (XSS) attacks if an attacker can inject malicious scripts into the application.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Never pass a string as the first argument to `setTimeout`. Instead, use a function or an arrow function.\n2. **Input Validation and Sanitization**: Always validate and sanitize any untrusted input before using it in your application.\n3. **Content Security Policy (CSP)**: Implement a strong CSP to mitigate the impact of XSS attacks.\n4. **Use Security Libraries**: Utilize libraries that help in escaping and sanitizing data.\n\n### Source Code Fix Recommendation\n\nIn the provided code example, ensure that `setTimeout` is not used with untrusted data. The current usage is safe as it uses an arrow function:\n\n```javascript\nsetTimeout(() => {\n    this.hide();\n}, 1000); // Ensure the delay is a number and not derived from untrusted input\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It is a standalone JavaScript code that relies on the built-in `setTimeout` function.\n\n### Relevant OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nThese links are verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-69b3ad8f-84d8-4f36-a6ca-d718965c7276",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This is particularly dangerous when the first argument to `setTimeout` is a string, as it will be evaluated as code. In the provided code snippet, `setTimeout(() => this._maybeEnableCycle())`, if any part of the function or its parameters is influenced by untrusted data, it could lead to security risks.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Never pass a string as the first argument to `setTimeout`. Always use a function or an arrow function.\n2. **Validate and Sanitize Inputs**: Ensure that any data used within the function is properly validated and sanitized.\n3. **Use Strict Content Security Policy (CSP)**: Implement a CSP that disallows the use of `eval` and similar functions.\n4. **Review and Audit Code**: Regularly review and audit your code for potential security vulnerabilities.\n\n### Source Code Fix Recommendation\n\nEnsure that the function passed to `setTimeout` does not rely on untrusted data. If `this._maybeEnableCycle()` is influenced by external input, validate and sanitize that input before use.\n\n```javascript\n// Example of a safe usage\nsetTimeout(() => {\n  // Ensure that _maybeEnableCycle is safe and does not rely on untrusted data\n  this._maybeEnableCycle();\n}, 1000);\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies solely on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-e47c8c52-a9f2-4218-971a-29e45bd5922f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be exploited by an attacker to execute arbitrary code.\n\nIn the provided code snippet, the `setTimeout` function is used with a callback function. While this specific usage does not directly involve untrusted data, it is crucial to ensure that any data used within the callback is properly validated and sanitized to prevent potential vulnerabilities.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an anonymous function instead of a string to avoid code injection risks.\n2. **Validate and Sanitize Input:** Ensure that any data used within the `setTimeout` callback is validated and sanitized to prevent malicious code execution.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features, such as DOMPurify for sanitizing HTML.\n4. **Content Security Policy (CSP):** Implement CSP headers to restrict the sources from which scripts can be loaded and executed.\n\n### Source Code Fix Recommendation\n\nEnsure that any data used within the `setTimeout` callback is properly validated and sanitized. In this specific example, since the `setTimeout` is using a function reference, ensure that any data used within the `triggerTransitionEnd` function is safe.\n\n```javascript\nsetTimeout(() => {\n    if (!called) {\n        // Ensure transitionElement is safe and properly validated\n        triggerTransitionEnd(transitionElement);\n    }\n}, 1000); // Example timeout value\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It uses native JavaScript functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-0460f494-9de5-4605-8156-f8f38c9f48ba",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted data\" vulnerability in JavaScript arises when the `setTimeout` function is used with a string argument that is constructed from untrusted data. This can lead to code injection attacks, as the string is evaluated as JavaScript code. If an attacker can control the string, they can execute arbitrary code within the context of the web page, potentially leading to data theft, session hijacking, or other malicious activities.\n\n### General Mitigation Advice\n\n1. **Avoid using strings in `setTimeout`:** Always use function references or arrow functions instead of strings to avoid evaluation of untrusted data.\n2. **Validate and sanitize inputs:** Ensure that any data used in your application is properly validated and sanitized to prevent injection attacks.\n3. **Use Content Security Policy (CSP):** Implement CSP headers to restrict the execution of inline scripts and reduce the risk of code injection.\n4. **Review and audit code:** Regularly review and audit your codebase for potential security vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```javascript\n// Vulnerable: Using a string in setTimeout with untrusted data\nlet userInput = \"alert('This is an attack!')\";\nsetTimeout(userInput, 1000);\n```\n\n#### Fixed Code\n\n```javascript\n// Fixed: Using a function instead of a string\nlet userInput = \"This is safe data\";\nsetTimeout(() => {\n    console.log(userInput);\n}, 1000);\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-fdedd992-4784-4def-90f9-a3641d08e7cc",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted input\" vulnerability in JavaScript arises when the `setTimeout` function is used with a string argument that can be influenced by untrusted input. This can lead to code injection attacks, as the string is evaluated as JavaScript code. In the provided code snippet, the use of `setTimeout` with a function is safe, but if any part of the function's logic or the data it processes can be influenced by untrusted input, it may still lead to security issues.\n\n### General Mitigation Advice\n\n1. **Avoid String Evaluation**: Never pass a string to `setTimeout` or `setInterval`. Always use a function.\n2. **Input Validation**: Validate and sanitize all inputs, especially those that can affect the logic within the `setTimeout` function.\n3. **Content Security Policy (CSP)**: Implement CSP headers to restrict the execution of scripts and reduce the risk of injection attacks.\n4. **Use Strict Mode**: Enable strict mode in JavaScript to catch common coding errors and \"unsafe\" actions.\n\n### Source Code Fix Recommendation\n\nEnsure that the `setTimeout` function is used with a function reference or an inline function, and validate any data that is being processed within the function:\n\n```javascript\nsetTimeout(() => {\n    var e;\n    const t = document.querySelector(`[data-mds-dtp-guid=\"${this.guid}\"]`);\n    if (t !== null) {\n        e = t.querySelector(\"[data-mds-dtp-time]\");\n        // Further processing with validated and sanitized data\n    }\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies on standard JavaScript and DOM APIs.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-d702091c-5b79-45e9-ae46-37a52300be93",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be exploited by an attacker to execute arbitrary code.\n\nIn the provided code snippet, the `setTimeout` function is used with an arrow function, which is generally safer than using a string. However, if any part of the function or its parameters is derived from untrusted data, it could still be vulnerable to injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references or arrow functions instead of strings to avoid code injection.\n2. **Validate and Sanitize Inputs:** Ensure that any data used within the `setTimeout` function is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features, such as DOMPurify for sanitizing HTML.\n4. **Content Security Policy (CSP):** Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\nEnsure that any data used within the `setTimeout` function is trusted or properly sanitized. If the function relies on external data, validate and sanitize it before use.\n\n```javascript\nsetTimeout(() => {\n  const e = this.getModal();\n  if (e != null) {\n    this.bsModal = new n.Modal(e);\n  }\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nTo execute the provided code example properly, the following library dependencies are required:\n\n- Bootstrap (for `n.Modal`): Ensure that Bootstrap's JavaScript library is included in your project.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-183bf076-ae96-4cc1-a9d2-5e7cc98129ca",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `setTimeout` function in JavaScript is often used to execute code after a specified delay. However, when `setTimeout` is used with untrusted data, it can lead to a security vulnerability known as \"Code Injection.\" This occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be manipulated by an attacker to execute arbitrary code.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references instead of strings to avoid executing arbitrary code.\n2. **Input Validation and Sanitization:** Ensure that any data used in your application is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that help mitigate injection attacks by escaping or encoding data.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, ensure that `setTimeout` is not used with a string. Instead, use a function reference:\n\n```javascript\nsetTimeout(() => {\n  this.dispose();\n  const t = this.getPopoverHeaderTitle(e);\n  let a = this.getDateTimePickerBodyHtml(e);\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nThe code snippet provided does not explicitly require any external libraries to execute. However, if the functions `dispose`, `getPopoverHeaderTitle`, and `getDateTimePickerBodyHtml` are part of a larger framework or library, ensure that those dependencies are included in your project.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-94: Improper Control of Generation of Code ('Code Injection')](https://cwe.mitre.org/data/definitions/94.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-17d3044f-4e18-468d-b4ec-5307e133fc66",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted data\" vulnerability in JavaScript arises when the `setTimeout` function is used with a string argument that is constructed from untrusted data. This can lead to code injection attacks, as the string is evaluated as JavaScript code. If an attacker can control the string, they can execute arbitrary code within the context of the web page, potentially leading to data theft, session hijacking, or other malicious activities.\n\n### General Mitigation Advice\n\n1. **Avoid using strings in `setTimeout`:** Always use function references or arrow functions instead of strings to avoid evaluation of untrusted data.\n2. **Validate and sanitize inputs:** Ensure that any data used in your application is properly validated and sanitized to prevent injection attacks.\n3. **Use Content Security Policy (CSP):** Implement CSP headers to restrict the execution of inline scripts and reduce the risk of code injection.\n4. **Review and audit code:** Regularly review and audit your codebase for potential security vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```javascript\n// Vulnerable: Using a string in setTimeout with untrusted data\nlet userInput = \"alert('This is an attack!')\";\nsetTimeout(userInput, 1000);\n```\n\n#### Fixed Code\n\n```javascript\n// Fixed: Using a function instead of a string\nlet userInput = \"This is safe data\";\nsetTimeout(() => {\n    console.log(userInput);\n}, 1000);\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-3eb63b8c-c74e-46d2-84c0-0571126b1022",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. In JavaScript, `setTimeout` can accept a string as its first argument, which is then evaluated as code. This can lead to code injection vulnerabilities if the string is constructed using untrusted input.\n\nIn the provided code snippet, `setTimeout(()=>this._maybeEnableCycle())`, the use of an arrow function mitigates the risk of code injection, as the function is not constructed from a string. However, if any part of the function's logic or the data it processes is influenced by untrusted input, it could still lead to security issues.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Always use function references or arrow functions instead of strings in `setTimeout`.\n2. **Validate and Sanitize Input**: Ensure that any data used within the function is properly validated and sanitized.\n3. **Use Security Libraries**: Consider using libraries that provide additional security features, such as DOMPurify for sanitizing HTML.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\nIn the given example, the use of an arrow function is already a good practice. However, ensure that `_maybeEnableCycle` and any data it processes are secure:\n\n```javascript\nsetTimeout(() => {\n  // Ensure _maybeEnableCycle is safe and does not process untrusted data unsafely\n  this._maybeEnableCycle();\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-652eadc5-7a40-434a-86c7-1e5e46e2413d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted data\" vulnerability in JavaScript arises when the `setTimeout` function is used with a string argument that includes untrusted data. This can lead to code injection attacks, as the string is evaluated as JavaScript code. If an attacker can control the string, they can execute arbitrary code within the context of the web page, potentially leading to data theft, session hijacking, or other malicious activities.\n\n### General Mitigation Advice\n\n- **Avoid using strings in `setTimeout`**: Always use function references or arrow functions instead of strings to avoid code evaluation.\n- **Validate and sanitize inputs**: Ensure that any data used in your application is properly validated and sanitized to prevent injection attacks.\n- **Use Content Security Policy (CSP)**: Implement CSP headers to restrict the execution of inline scripts and reduce the risk of code injection.\n\n### Source Code Fix Recommendation\n\n**Vulnerable Code:**\n\n```javascript\nsetTimeout(() => { t || B(s) }, 1000);\n```\n\n**Fixed Code:**\n\n```javascript\nsetTimeout(() => {\n  if (!t) {\n    B(s);\n  }\n}, 1000);\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It uses native JavaScript functions and syntax.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese resources provide further information on JavaScript security best practices and common vulnerabilities."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-dda49357-036a-4e69-8a9e-65025e676156",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluation of Untrusted Data\" vulnerability in JavaScript arises when the `eval()` function is used to execute code that includes untrusted data. This can lead to code injection attacks, where an attacker can execute arbitrary code within the context of the application. In the provided code snippet, the use of `eval()` with template literals that include user-controlled data (`opts.lookup`, `item.name`, `item.id`, and `opts.item_template`) poses a significant security risk.\n\n### General Mitigation Advice\n\n1. **Avoid `eval()`:** Refrain from using `eval()` whenever possible. There are usually safer alternatives to achieve the same functionality.\n2. **Sanitize Inputs:** Ensure that all user inputs are properly sanitized and validated before use.\n3. **Use Safe Alternatives:** Consider using safer alternatives like `JSON.parse()` for parsing JSON data or template engines that automatically escape data.\n4. **Content Security Policy (CSP):** Implement a strong CSP to mitigate the risk of executing malicious scripts.\n\n### Source Code Fix Recommendation\n\nReplace the use of `eval()` with a safer alternative. In this case, you can directly construct the HTML string without using `eval()`:\n\n```javascript\nconst listItem = `<li class=\"mention-li-nt ${encodeURIComponent(opts.lookup)}\" data-name=\"${encodeURIComponent(item.name)}\" data-id=\"${encodeURIComponent(item.id)}\">${encodeURIComponent(opts.item_template)}</li>`;\nif (!items.length) return hideLookup();\n$lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")}</ul>`;\n```\n\n### Library Dependencies\n\nThe provided code snippet does not explicitly require any external library dependencies to execute. However, if the code is part of a larger application, ensure that all libraries used are up-to-date and free from known vulnerabilities.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)"
              },
              "properties": {
                "tags": [
                  "DS189424"
                ]
              }
            },
            {
              "id": "glog-bad32b3a-3efa-4b3c-a660-4ab5ab42e232",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `setTimeout` function in JavaScript is often used to execute a piece of code after a specified delay. However, when untrusted data is used to construct the code or the delay, it can lead to security vulnerabilities such as code injection or denial of service. This is because `setTimeout` can execute a string as code, which can be exploited if the string is constructed from untrusted input.\n\n### General Mitigation Advice\n\n1. **Avoid using strings in `setTimeout`:** Always use function references instead of strings to avoid code injection vulnerabilities.\n2. **Validate and sanitize inputs:** Ensure that any data used in constructing the delay or the function is properly validated and sanitized.\n3. **Use strict Content Security Policy (CSP):** Implement CSP headers to prevent execution of untrusted scripts.\n4. **Limit the delay:** Ensure that the delay is within a reasonable range to prevent denial of service attacks.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, ensure that the `setTimeout` function is not constructed using untrusted data. The current usage is safe as it uses a function reference. However, ensure that `_cachedPingMessage` and any other data used within the function are sanitized and validated.\n\n```javascript\nsetTimeout(async () => {\n    if (this._connectionState === HubConnectionState.Connected) {\n        try {\n            await this._sendMessage(this._cachedPingMessage);\n        } catch {\n            this._cleanupPingTimer();\n        }\n    }\n}, 1000); // Ensure the delay is a constant or a validated variable\n```\n\n### Library Dependencies\n\nThe code snippet provided does not explicitly require any external library dependencies to execute. However, it assumes the existence of certain classes and methods such as `HubConnectionState`, `_sendMessage`, and `_cleanupPingTimer`, which may be part of a larger framework or library.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nThese links are valid and accessible for anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-38b2a047-943d-4ab5-96c5-2e5696c94c24",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability is particularly dangerous because `setTimeout` can execute a string of code, which can be manipulated if the input is not properly sanitized or validated. In the provided code example, the use of `setTimeout(() => this.serverTimeout())` does not directly show the vulnerability, but if `this.serverTimeout` or any data it relies on is influenced by untrusted input, it could lead to security issues.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an arrow function instead of a string to avoid code injection.\n2. **Input Validation and Sanitization:** Ensure that any data used within the `setTimeout` function is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that help in sanitizing and validating inputs.\n4. **Content Security Policy (CSP):** Implement CSP headers to mitigate the risk of executing malicious scripts.\n\n### Source Code Fix Recommendation\n\nInstead of using a string in `setTimeout`, use a function reference or an arrow function. Ensure that any data used is validated and sanitized.\n\n```javascript\n// Original code\nsetTimeout(() => this.serverTimeout(), 1000);\n\n// Ensure `this.serverTimeout` is a safe function and does not rely on untrusted data\nsetTimeout(() => {\n  // Validate and sanitize any data used within this function\n  this.serverTimeout();\n}, 1000);\n```\n\n### Library Dependencies\n\nThe provided code example does not require any external library dependencies to execute properly. It relies on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-c5e42426-3490-4ccb-b98c-b476ed8b72f0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing for the execution of arbitrary code. This can occur if the first argument to `setTimeout` is a string that is constructed from or includes untrusted input. When `setTimeout` is used in this way, it behaves similarly to `eval`, which can lead to security vulnerabilities such as code injection.\n\n### General Mitigation Advice\n\n1. **Avoid using strings as the first argument to `setTimeout`:** Always use a function reference or an arrow function instead of a string.\n2. **Validate and sanitize inputs:** Ensure that any data used in your application is properly validated and sanitized to prevent injection attacks.\n3. **Use strict Content Security Policy (CSP):** Implement a CSP that disallows the use of `eval` and similar functions.\n4. **Review and audit code:** Regularly review and audit your codebase for instances where `setTimeout` is used with untrusted data.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, `setTimeout` is used with an arrow function, which is a safe practice. However, if there were any untrusted data being used within the function, it should be validated and sanitized. Here is a general example of how to ensure safety:\n\n```javascript\n// Example of safe usage\nsetTimeout(async () => {\n    try {\n        if (!this._reconnectInProgress) {\n            // Ensure any data used here is trusted or properly sanitized\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}, 1000); // Delay in milliseconds\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It uses native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links are valid and accessible for anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-042d5490-358b-4ace-88b0-cd622ec9042e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted input\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted input, potentially allowing an attacker to execute arbitrary code. This vulnerability is particularly dangerous because `setTimeout` can execute a string of code, similar to `eval`, which can lead to code injection attacks if the input is not properly sanitized.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an arrow function instead of a string to avoid executing arbitrary code.\n2. **Input Validation and Sanitization:** Ensure that any input used in conjunction with `setTimeout` is properly validated and sanitized to prevent injection attacks.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features, such as DOMPurify, to sanitize inputs.\n4. **Content Security Policy (CSP):** Implement a strong CSP to mitigate the risk of executing malicious scripts.\n\n### Source Code Fix Recommendation\n\nInstead of using a string in `setTimeout`, use a function reference or an arrow function. Here's how you can fix the specific vulnerability sink:\n\n```javascript\nconst abortController = new AbortController();\n\n// Secure usage of setTimeout with a function reference\nsetTimeout(() => {\n    abortController.abort();\n}, 1000); // Specify the delay as needed\n```\n\n### Library Dependencies\n\nThe provided code example does not require any external library dependencies to execute properly. It uses native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-e4201e32-bd8a-485b-a6fb-ecd1b954c187",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability\n\nThe \"Unsecured URL\" vulnerability occurs when a JavaScript application makes requests to URLs over an unencrypted HTTP connection. This can expose sensitive data to interception by attackers, leading to potential data breaches or man-in-the-middle attacks. The vulnerability is particularly concerning when dealing with sensitive information such as authentication tokens, user credentials, or personal data.\n\n### General Mitigation Advice\n\n1. **Use HTTPS**: Always use HTTPS instead of HTTP to ensure that data is encrypted during transmission.\n2. **Content Security Policy (CSP)**: Implement a CSP to restrict the sources from which content can be loaded.\n3. **Secure Cookies**: Use the `Secure` and `HttpOnly` flags for cookies to prevent them from being accessed via JavaScript or transmitted over non-secure connections.\n4. **HSTS**: Implement HTTP Strict Transport Security (HSTS) to enforce secure connections to the server.\n\n### Source Code Fix Recommendation\n\nReplace the unsecured HTTP URL with a secure HTTPS URL in your JavaScript code. Here's an example:\n\n```javascript\n// Original code with unsecured URL\nfetch('http://via.placeholder.com/150')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    document.querySelector('img').src = imageObjectURL;\n  });\n\n// Fixed code with secured URL\nfetch('https://via.placeholder.com/150')\n  .then(response => response.blob())\n  .then(imageBlob => {\n    const imageObjectURL = URL.createObjectURL(imageBlob);\n    document.querySelector('img').src = imageObjectURL;\n  });\n```\n\n### Library Dependencies\n\nThe above code example does not require any additional library dependencies to execute properly, as it uses native JavaScript features.\n\n### OWASP Resources\n\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-fef0114d-6f8f-4fda-9700-db4dc6e442fc",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability occurs because `setTimeout` can accept a string as its first argument, which is then evaluated as code. If this string is constructed using untrusted data, it can lead to code injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an arrow function instead of a string to avoid code evaluation.\n2. **Validate and Sanitize Inputs:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that help in sanitizing and validating inputs to prevent injection attacks.\n4. **Content Security Policy (CSP):** Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, ensure that `setTimeout` is used with a function reference or an arrow function, and avoid using untrusted data directly:\n\n```javascript\nsetTimeout(() => {\n    this.init();\n}, 1000); // Specify a delay as needed\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It is a standalone JavaScript code that relies on the built-in `setTimeout` function.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-df28507a-ace9-49c0-bfaa-d6a7a6312f31",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This can occur if the first argument to `setTimeout` is a string that is constructed using untrusted input, which is then evaluated as code. This vulnerability can lead to cross-site scripting (XSS) attacks if an attacker can inject malicious scripts into the application.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Never pass a string as the first argument to `setTimeout`. Instead, use a function or an arrow function.\n2. **Input Validation and Sanitization**: Always validate and sanitize any untrusted input before using it in your application.\n3. **Content Security Policy (CSP)**: Implement a strong CSP to mitigate the impact of XSS attacks.\n4. **Use Security Libraries**: Utilize libraries that help in escaping and sanitizing data.\n\n### Source Code Fix Recommendation\n\nIn the provided code example, ensure that `setTimeout` is not used with untrusted data. The current usage is safe as it uses an arrow function:\n\n```javascript\nsetTimeout(() => {\n    this.hide();\n}, 1000); // Ensure the delay is a number and not derived from untrusted input\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It is a standalone JavaScript code that relies on the built-in `setTimeout` function.\n\n### Relevant OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\nThese links are verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-4d77b4a7-03fd-4475-aa04-c7322faca5ff",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This is particularly dangerous when the first argument to `setTimeout` is a string, as it will be evaluated as code. In the provided code snippet, `setTimeout(() => this._maybeEnableCycle())`, if any part of the function or its parameters is influenced by untrusted data, it could lead to security risks.\n\n### General Mitigation Advice\n\n1. **Avoid String Arguments**: Never pass a string as the first argument to `setTimeout`. Always use a function or an arrow function.\n2. **Validate and Sanitize Inputs**: Ensure that any data used within the function is properly validated and sanitized.\n3. **Use Strict Content Security Policy (CSP)**: Implement a CSP that disallows the use of `eval` and similar functions.\n4. **Review and Audit Code**: Regularly review and audit your code for potential security vulnerabilities.\n\n### Source Code Fix Recommendation\n\nEnsure that the function passed to `setTimeout` does not rely on untrusted data. If `this._maybeEnableCycle()` is influenced by external input, validate and sanitize that input before use.\n\n```javascript\n// Example of a safe usage\nsetTimeout(() => {\n  // Ensure that _maybeEnableCycle is safe and does not rely on untrusted data\n  this._maybeEnableCycle();\n}, 1000);\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies solely on native JavaScript functionality.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-5b9d63ca-432f-4c93-bacc-97e4a905033e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be exploited by an attacker to execute arbitrary code.\n\nIn the provided code snippet, the `setTimeout` function is used with a callback function. While this specific usage does not directly involve untrusted data, it is crucial to ensure that any data used within the callback is properly validated and sanitized to prevent potential vulnerabilities.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference or an anonymous function instead of a string to avoid code injection risks.\n2. **Validate and Sanitize Input:** Ensure that any data used within the `setTimeout` callback is validated and sanitized to prevent malicious code execution.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features, such as DOMPurify for sanitizing HTML.\n4. **Content Security Policy (CSP):** Implement CSP headers to restrict the sources from which scripts can be loaded and executed.\n\n### Source Code Fix Recommendation\n\nEnsure that any data used within the `setTimeout` callback is properly validated and sanitized. In this specific example, since the `setTimeout` is using a function reference, ensure that any data used within the `triggerTransitionEnd` function is safe.\n\n```javascript\nsetTimeout(() => {\n    if (!called) {\n        // Ensure transitionElement is safe and properly validated\n        triggerTransitionEnd(transitionElement);\n    }\n}, 1000); // Example timeout value\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It uses native JavaScript functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-6a61fa84-c0fa-408c-921b-cf973023842a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluation of Untrusted Data\" vulnerability in JavaScript occurs when untrusted data is executed as code, which can lead to security risks such as code injection attacks. In the provided code snippet, the use of `eval()` with template literals that include untrusted data (`opts.lookup`, `item.name`, `item.id`, and `opts.item_template`) can lead to such vulnerabilities. This allows an attacker to execute arbitrary code if they can control any part of the input data.\n\n### General Mitigation Advice\n\n1. **Avoid `eval()`:** Refrain from using `eval()` to execute code. Instead, use safer alternatives such as functions or template engines that do not execute code.\n2. **Input Validation and Sanitization:** Ensure that all inputs are validated and sanitized to prevent malicious code from being executed.\n3. **Content Security Policy (CSP):** Implement a strong CSP to mitigate the risk of executing malicious scripts.\n4. **Use Trusted Libraries:** Utilize libraries that are well-maintained and have security features to handle dynamic content safely.\n\n### Source Code Fix Recommendation\n\nReplace the use of `eval()` with a safer alternative. For example, you can use a template engine or directly manipulate the DOM without executing code:\n\n```javascript\nconst listItem = document.createElement('li');\nlistItem.className = `mention-li-nt ${opts.lookup}`;\nlistItem.setAttribute('data-name', item.name);\nlistItem.setAttribute('data-id', item.id);\nlistItem.innerHTML = opts.item_template;\n\nif (!items.length) return hideLookup();\n$lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")}</ul>`;\n```\n\n### Library Dependencies\n\nThe provided code snippet does not explicitly require any external libraries to execute. However, if you are using a template engine or other libraries for DOM manipulation, ensure they are included in your project.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nPlease ensure that the links are accessible and valid for anonymous users."
              },
              "properties": {
                "tags": [
                  "DS189424"
                ]
              }
            },
            {
              "id": "glog-ab1fa006-4544-40cc-ba19-d102093429ab",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability arises when the `setTimeout` function is used with untrusted data, potentially allowing an attacker to execute arbitrary code. This vulnerability is particularly dangerous because it can lead to code injection attacks if the input to `setTimeout` is not properly sanitized or validated. In the provided code snippet, the function `setTimeout(function() { f || k() })` could be vulnerable if `f` or `k` are derived from untrusted sources.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use a function reference instead of a string to avoid the risk of code injection.\n2. **Input Validation and Sanitization:** Ensure that any data used in `setTimeout` is properly validated and sanitized to prevent malicious code execution.\n3. **Use Strict Content Security Policy (CSP):** Implement a strict CSP to mitigate the risk of executing injected scripts.\n4. **Use Trusted Libraries:** Utilize libraries that are well-maintained and have a good security track record.\n\n### Source Code Fix Recommendation\n\nInstead of using potentially untrusted data directly in `setTimeout`, ensure that the function references are safe and validated:\n\n```javascript\n// Assuming f and k are function references and not derived from untrusted data\nsetTimeout(function() {\n    if (typeof f === 'function') {\n        f();\n    } else if (typeof k === 'function') {\n        k();\n    }\n}, 1000);\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-6f92ed42-19b9-477e-9c9f-8b1147cac3d7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of JavaScript code, which, if constructed from untrusted input, can be exploited by attackers to execute arbitrary code.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references instead of strings when calling `setTimeout`.\n2. **Validate and Sanitize Input:** Ensure that any data used in conjunction with `setTimeout` is properly validated and sanitized.\n3. **Use Strict Content Security Policy (CSP):** Implement a strict CSP to prevent the execution of malicious scripts.\n4. **Use Security Libraries:** Consider using libraries that help in sanitizing and validating inputs.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```javascript\n// Vulnerable: Using untrusted data in setTimeout\nsetTimeout(function() {\n    eval(untrustedInput);\n}, 1000);\n```\n\n#### Fixed Code\n\n```javascript\n// Secure: Using a function reference instead of a string\nsetTimeout(function() {\n    // Safely handle the untrusted input\n    console.log('Executing safe code');\n}, 1000);\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese resources and links are valid and accessible to anonymous users as of the latest check."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-4894fd97-b595-49bc-a5ee-f0d3a380e925",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted data\" vulnerability in JavaScript arises when the `setTimeout` function is used with a string argument that is constructed from untrusted data. This can lead to code injection attacks, as the string is evaluated as JavaScript code. If an attacker can control the string, they can execute arbitrary code within the context of the web page, potentially leading to data theft, session hijacking, or other malicious activities.\n\n### General Mitigation Advice\n\n1. **Avoid using strings in `setTimeout`:** Always use function references or arrow functions instead of strings to avoid evaluation of untrusted data.\n2. **Validate and sanitize inputs:** Ensure that any data used in your application is properly validated and sanitized to prevent injection attacks.\n3. **Use Content Security Policy (CSP):** Implement CSP headers to restrict the execution of inline scripts and reduce the risk of code injection.\n4. **Review and audit code:** Regularly review and audit your codebase for potential security vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```javascript\n// Vulnerable: Using a string in setTimeout with untrusted data\nlet userInput = \"alert('This is an attack!')\";\nsetTimeout(userInput, 1000);\n```\n\n#### Fixed Code\n\n```javascript\n// Fixed: Using a function instead of a string\nlet userInput = \"This is safe data\";\nsetTimeout(() => {\n    console.log(userInput);\n}, 1000);\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-f3830da4-8cd4-4f19-9bcc-c5e04b122672",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted input\" vulnerability in JavaScript arises when the `setTimeout` function is used with a string argument that can be influenced by untrusted input. This can lead to code injection attacks, as the string is evaluated as JavaScript code. In the provided code snippet, the use of `setTimeout` with a function is safe, but if any part of the function's logic or the data it processes can be influenced by untrusted input, it may still lead to security issues.\n\n### General Mitigation Advice\n\n1. **Avoid String Evaluation**: Never pass a string to `setTimeout` or `setInterval`. Always use a function.\n2. **Input Validation**: Validate and sanitize all inputs, especially those that can affect the logic within the `setTimeout` function.\n3. **Content Security Policy (CSP)**: Implement CSP headers to restrict the execution of scripts and reduce the risk of injection attacks.\n4. **Use Strict Mode**: Enable strict mode in JavaScript to catch common coding errors and \"unsafe\" actions.\n\n### Source Code Fix Recommendation\n\nEnsure that the `setTimeout` function is used with a function reference or an inline function, and validate any data that is being processed within the function:\n\n```javascript\nsetTimeout(() => {\n    var e;\n    const t = document.querySelector(`[data-mds-dtp-guid=\"${this.guid}\"]`);\n    if (t !== null) {\n        e = t.querySelector(\"[data-mds-dtp-time]\");\n        // Further processing with validated and sanitized data\n    }\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nThe provided code snippet does not require any external library dependencies to execute properly. It relies on standard JavaScript and DOM APIs.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-2e0ea847-b693-4f8b-bb1a-b506ad8e568b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout Usage with Untrusted Data\" vulnerability in JavaScript arises when the `setTimeout` function is used with untrusted data, potentially leading to code injection attacks. This vulnerability occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be exploited by an attacker to execute arbitrary code.\n\nIn the provided code snippet, the `setTimeout` function is used with an arrow function, which is generally safer than using a string. However, if any part of the function or its parameters is derived from untrusted data, it could still be vulnerable to injection attacks.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references or arrow functions instead of strings to avoid code injection.\n2. **Validate and Sanitize Inputs:** Ensure that any data used within the `setTimeout` function is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that provide additional security features, such as DOMPurify for sanitizing HTML.\n4. **Content Security Policy (CSP):** Implement CSP headers to restrict the execution of inline scripts.\n\n### Source Code Fix Recommendation\n\nEnsure that any data used within the `setTimeout` function is trusted or properly sanitized. If the function relies on external data, validate and sanitize it before use.\n\n```javascript\nsetTimeout(() => {\n  const e = this.getModal();\n  if (e != null) {\n    this.bsModal = new n.Modal(e);\n  }\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nTo execute the provided code example properly, the following library dependencies are required:\n\n- Bootstrap (for `n.Modal`): Ensure that Bootstrap's JavaScript library is included in your project.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-d088e842-13b6-4c76-82d4-07f54c193e9a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `setTimeout` function in JavaScript is often used to execute code after a specified delay. However, when `setTimeout` is used with untrusted data, it can lead to a security vulnerability known as \"Code Injection.\" This occurs because `setTimeout` can execute a string of code, which, if constructed from untrusted input, can be manipulated by an attacker to execute arbitrary code.\n\n### General Mitigation Advice\n\n1. **Avoid Using Strings in `setTimeout`:** Always use function references instead of strings to avoid executing arbitrary code.\n2. **Input Validation and Sanitization:** Ensure that any data used in your application is properly validated and sanitized.\n3. **Use Security Libraries:** Consider using libraries that help mitigate injection attacks by escaping or encoding data.\n\n### Source Code Fix Recommendation\n\nIn the provided code snippet, ensure that `setTimeout` is not used with a string. Instead, use a function reference:\n\n```javascript\nsetTimeout(() => {\n  this.dispose();\n  const t = this.getPopoverHeaderTitle(e);\n  let a = this.getDateTimePickerBodyHtml(e);\n}, 1000); // Example delay\n```\n\n### Library Dependencies\n\nThe code snippet provided does not explicitly require any external libraries to execute. However, if the functions `dispose`, `getPopoverHeaderTitle`, and `getDateTimePickerBodyHtml` are part of a larger framework or library, ensure that those dependencies are included in your project.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-94: Improper Control of Generation of Code ('Code Injection')](https://cwe.mitre.org/data/definitions/94.html)"
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            },
            {
              "id": "glog-724fa629-ff4a-4bad-ac6a-246163a5233b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Evaluate setTimeout for untrusted data\" vulnerability in JavaScript arises when the `setTimeout` function is used with a string argument that is constructed from untrusted data. This can lead to code injection attacks, as the string is evaluated as JavaScript code. If an attacker can control the string, they can execute arbitrary code within the context of the web page, potentially leading to data theft, session hijacking, or other malicious activities.\n\n### General Mitigation Advice\n\n1. **Avoid using strings in `setTimeout`:** Always use function references or arrow functions instead of strings to avoid evaluation of untrusted data.\n2. **Validate and sanitize inputs:** Ensure that any data used in your application is properly validated and sanitized to prevent injection attacks.\n3. **Use Content Security Policy (CSP):** Implement CSP headers to restrict the execution of inline scripts and reduce the risk of code injection.\n4. **Review and audit code:** Regularly review and audit your codebase for potential security vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```javascript\n// Vulnerable: Using a string in setTimeout with untrusted data\nlet userInput = \"alert('This is an attack!')\";\nsetTimeout(userInput, 1000);\n```\n\n#### Fixed Code\n\n```javascript\n// Fixed: Using a function instead of a string\nlet userInput = \"This is safe data\";\nsetTimeout(() => {\n    console.log(userInput);\n}, 1000);\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')](https://cwe.mitre.org/data/definitions/95.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS172411"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-ccabd564-f425-49aa-8a97-4a9688b16698",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Disabled certificate validation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/codemirror.min.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 197915,
                  "endLine": 1,
                  "endColumn": 201964,
                  "charOffset": 197915,
                  "charLength": 4049,
                  "snippet": {
                    "text": "unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone\"),builtin:b(\"bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time zone timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml\"),atoms:b(\"false true null unknown\"),operatorChars:/^[*\\/+\\-%<>!=&|^\\/#@?~]/,backslashStringEscapes:!1,identifierQuote:'\"',hooks:{'\"':t},dateSQL:b(\"date time timestamp\"),support:b(\"decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant\")}),n.defineMIME(\"text/x-gql\",{name:\"sql\",keywords:b(\"ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where\"),atoms:b(\"false true\"),builtin:b(\"blob datetime first key __key__ string integer double boolean null\"),operatorChars:/^[*+\\-%<>!=]/}),n.defineMIME(\"text/x-gpsql\",{name:\"sql\",client:b(\"source\"),keywords:b(\"abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password",
                    "rendered": {
                      "text": "unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone\"),builtin:b(\"bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time zone timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml\"),atoms:b(\"false true null unknown\"),operatorChars:/^[*\\/+\\-%<>!=&|^\\/#@?~]/,backslashStringEscapes:!1,identifierQuote:'\"',hooks:{'\"':t},dateSQL:b(\"date time timestamp\"),support:b(\"decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant\")}),n.defineMIME(\"text/x-gql\",{name:\"sql\",keywords:b(\"ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where\"),atoms:b(\"false true\"),builtin:b(\"blob datetime first key __key__ string integer double boolean null\"),operatorChars:/^[*+\\-%<>!=]/}),n.defineMIME(\"text/x-gpsql\",{name:\"sql\",client:b(\"source\"),keywords:b(\"abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password",
                      "markdown": "`unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone\"),builtin:b(\"bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time zone timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml\"),atoms:b(\"false true null unknown\"),operatorChars:/^[*\\/+\\-%<>!=&|^\\/#@?~]/,backslashStringEscapes:!1,identifierQuote:'\"',hooks:{'\"':t},dateSQL:b(\"date time timestamp\"),support:b(\"decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant\")}),n.defineMIME(\"text/x-gql\",{name:\"sql\",keywords:b(\"ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where\"),atoms:b(\"false true\"),builtin:b(\"blob datetime first key __key__ string integer double boolean null\"),operatorChars:/^[*+\\-%<>!=]/}),n.defineMIME(\"text/x-gpsql\",{name:\"sql\",client:b(\"source\"),keywords:b(\"abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Certificate.Validation"
            ]
          }
        },
        {
          "ruleId": "glog-f5f2dc68-3459-4572-96b4-4319493a0037",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/BBCodeHelperTests.cs"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 83,
                  "endLine": 43,
                  "endColumn": 98,
                  "charOffset": 1629,
                  "charLength": 15,
                  "snippet": {
                    "text": "http://test.com",
                    "rendered": {
                      "text": "http://test.com",
                      "markdown": "`http://test.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/BBCodeHelperTests.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1629,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "https://test.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-7a60ff40-5dd2-4249-b6cf-12bd82f239b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/BBCodeHelperTests.cs"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 101,
                  "endLine": 40,
                  "endColumn": 116,
                  "charOffset": 1482,
                  "charLength": 15,
                  "snippet": {
                    "text": "http://test.com",
                    "rendered": {
                      "text": "http://test.com",
                      "markdown": "`http://test.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/BBCodeHelperTests.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1482,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "https://test.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-474c8b66-c5ad-496d-b751-0be29f7086f3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/UrlHelperTests.cs"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 35,
                  "endLine": 41,
                  "endColumn": 61,
                  "charOffset": 1528,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://supplementsbook.org",
                    "rendered": {
                      "text": "http://supplementsbook.org",
                      "markdown": "`http://supplementsbook.org`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/UrlHelperTests.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1528,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://supplementsbook.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-35167f87-013b-4fc1-b9c4-5c344c757086",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36552,
                  "endLine": 32,
                  "endColumn": 36695,
                  "charOffset": 251057,
                  "charLength": 143,
                  "snippet": {
                    "text": "setTimeout(async()=>{if(this._connectionState===l.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()",
                    "rendered": {
                      "text": "setTimeout(async()=>{if(this._connectionState===l.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()",
                      "markdown": "`setTimeout(async()=>{if(this._connectionState===l.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-3ad96f9e-d0d7-4ad3-af03-5996457a670c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/UrlHelperTests.cs"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 75,
                  "endLine": 40,
                  "endColumn": 101,
                  "charOffset": 1422,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://supplementsbook.org",
                    "rendered": {
                      "text": "http://supplementsbook.org",
                      "markdown": "`http://supplementsbook.org`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/Tests/YAFNET.Tests.CoreTests/Helpers/UrlHelperTests.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1422,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://supplementsbook.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-9093ca05-643a-40d5-8ff3-cd7e6b97bea6",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36366,
                  "endLine": 32,
                  "endColumn": 36401,
                  "charOffset": 250871,
                  "charLength": 35,
                  "snippet": {
                    "text": "setTimeout(()=>this.serverTimeout()",
                    "rendered": {
                      "text": "setTimeout(()=>this.serverTimeout()",
                      "markdown": "`setTimeout(()=>this.serverTimeout()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-6ac11ece-6461-4097-8c9a-54baabcbd506",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 27300,
                  "endLine": 32,
                  "endColumn": 27318,
                  "charOffset": 241805,
                  "charLength": 18,
                  "snippet": {
                    "text": "setTimeout(async()",
                    "rendered": {
                      "text": "setTimeout(async()",
                      "markdown": "`setTimeout(async()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-9ff8ec4e-2c22-497c-b2ee-25ef389c503d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/Pages/Admin/HostSettings.cshtml"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 12,
                  "endLine": 348,
                  "endColumn": 36,
                  "charOffset": 15793,
                  "charLength": 24,
                  "snippet": {
                    "text": "http://stopforumspam.com",
                    "rendered": {
                      "text": "http://stopforumspam.com",
                      "markdown": "`http://stopforumspam.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YetAnotherForum.NET/Pages/Admin/HostSettings.cshtml"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15793,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "https://stopforumspam.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-836dc1d3-6826-416c-83c1-3c17c62410ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/Pages/Admin/HostSettings.cshtml"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 12,
                  "endLine": 336,
                  "endColumn": 31,
                  "charOffset": 15347,
                  "charLength": 19,
                  "snippet": {
                    "text": "http://botscout.com",
                    "rendered": {
                      "text": "http://botscout.com",
                      "markdown": "`http://botscout.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YetAnotherForum.NET/Pages/Admin/HostSettings.cshtml"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15347,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "https://botscout.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-13edc6b5-b064-40de-9acb-aa28b29da4e0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 96804,
                  "endLine": 4,
                  "endColumn": 96830,
                  "charOffset": 195429,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://via.placeholder.com",
                    "rendered": {
                      "text": "http://via.placeholder.com",
                      "markdown": "`http://via.placeholder.com`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 195429,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://via.placeholder.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-8415b33c-2186-4bc3-9067-085e8afff515",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 20522,
                  "endLine": 32,
                  "endColumn": 20547,
                  "charOffset": 235027,
                  "charLength": 25,
                  "snippet": {
                    "text": "setTimeout(()=>{t.abort()",
                    "rendered": {
                      "text": "setTimeout(()=>{t.abort()",
                      "markdown": "`setTimeout(()=>{t.abort()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-35f124dc-0d21-4423-9e70-a067754b9126",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 777,
                  "startColumn": 41,
                  "endLine": 777,
                  "endColumn": 57,
                  "charOffset": 33807,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33807,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-3545b43b-a5c1-4ac0-92f2-fb67f6d0ccd5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 41,
                  "endLine": 763,
                  "endColumn": 57,
                  "charOffset": 32956,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32956,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-6c79181e-7242-4616-9605-6fd69854828d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2261,
                  "endLine": 4,
                  "endColumn": 2288,
                  "charOffset": 100886,
                  "charLength": 27,
                  "snippet": {
                    "text": "setTimeout(()=>{this.init()",
                    "rendered": {
                      "text": "setTimeout(()=>{this.init()",
                      "markdown": "`setTimeout(()=>{this.init()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-d7d7fcf0-3b1e-4e5a-95ec-a75bb7fea601",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14358,
                  "endLine": 1,
                  "endColumn": 14397,
                  "charOffset": 14358,
                  "charLength": 39,
                  "snippet": {
                    "text": "setTimeout(()=>this._maybeEnableCycle()",
                    "rendered": {
                      "text": "setTimeout(()=>this._maybeEnableCycle()",
                      "markdown": "`setTimeout(()=>this._maybeEnableCycle()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-a6635e15-563e-4a72-9a1c-fcd2a7bcba03",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 42,
                  "endLine": 749,
                  "endColumn": 58,
                  "charOffset": 32179,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32179,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-2856b10d-3930-454f-a1fe-684ffaa65654",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36552,
                  "endLine": 32,
                  "endColumn": 36695,
                  "charOffset": 251057,
                  "charLength": 143,
                  "snippet": {
                    "text": "setTimeout(async()=>{if(this._connectionState===l.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()",
                    "rendered": {
                      "text": "setTimeout(async()=>{if(this._connectionState===l.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()",
                      "markdown": "`setTimeout(async()=>{if(this._connectionState===l.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-87cf15de-a9ec-4144-ac47-71307fdd1907",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 109,
                  "endLine": 613,
                  "endColumn": 123,
                  "charOffset": 25179,
                  "charLength": 14,
                  "snippet": {
                    "text": "http://|https:",
                    "rendered": {
                      "text": "http://|https:",
                      "markdown": "`http://|https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25179,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "https://|https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-ef136e5e-c7af-4cd2-bf8c-9fa4edb2b6cf",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.min.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 2410,
                  "endLine": 1,
                  "endColumn": 2433,
                  "charOffset": 2410,
                  "charLength": 23,
                  "snippet": {
                    "text": "setTimeout(()=>{t||R(s)",
                    "rendered": {
                      "text": "setTimeout(()=>{t||R(s)",
                      "markdown": "`setTimeout(()=>{t||R(s)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-e0c49f81-6579-45c7-b337-0a3fdae6f153",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 109,
                  "endLine": 599,
                  "endColumn": 123,
                  "charOffset": 24309,
                  "charLength": 14,
                  "snippet": {
                    "text": "http://|https:",
                    "rendered": {
                      "text": "http://|https:",
                      "markdown": "`http://|https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24309,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "https://|https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-a7d8d74c-3f36-4c02-9073-d95a850b9d7f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 586,
                  "startColumn": 132,
                  "endLine": 586,
                  "endColumn": 146,
                  "charOffset": 23481,
                  "charLength": 14,
                  "snippet": {
                    "text": "http://|https:",
                    "rendered": {
                      "text": "http://|https:",
                      "markdown": "`http://|https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23481,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "https://|https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-04b3beef-8348-4b15-9916-a1ab8105e1f0",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36366,
                  "endLine": 32,
                  "endColumn": 36401,
                  "charOffset": 250871,
                  "charLength": 35,
                  "snippet": {
                    "text": "setTimeout(()=>this.serverTimeout()",
                    "rendered": {
                      "text": "setTimeout(()=>this.serverTimeout()",
                      "markdown": "`setTimeout(()=>this.serverTimeout()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-06c5a5ef-11c3-40bf-a4d5-19b84d7d3d9e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 27300,
                  "endLine": 32,
                  "endColumn": 27318,
                  "charOffset": 241805,
                  "charLength": 18,
                  "snippet": {
                    "text": "setTimeout(async()",
                    "rendered": {
                      "text": "setTimeout(async()",
                      "markdown": "`setTimeout(async()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-f8c5794f-52b0-47a6-bfa6-2d232fc843f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 42,
                  "endLine": 557,
                  "endColumn": 58,
                  "charOffset": 21703,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21703,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-7aba8f4e-7144-4b3b-ab28-ede9ed69568c",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 20522,
                  "endLine": 32,
                  "endColumn": 20547,
                  "charOffset": 235027,
                  "charLength": 25,
                  "snippet": {
                    "text": "setTimeout(()=>{t.abort()",
                    "rendered": {
                      "text": "setTimeout(()=>{t.abort()",
                      "markdown": "`setTimeout(()=>{t.abort()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-1f56d904-7f54-471d-b9d1-9653a6f1eacb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 96804,
                  "endLine": 4,
                  "endColumn": 96830,
                  "charOffset": 195429,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://via.placeholder.com",
                    "rendered": {
                      "text": "http://via.placeholder.com",
                      "markdown": "`http://via.placeholder.com`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 195429,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://via.placeholder.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-6286d5d8-55ab-4324-afef-72fc1abbb1cf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 42,
                  "endLine": 542,
                  "endColumn": 58,
                  "charOffset": 20881,
                  "charLength": 16,
                  "snippet": {
                    "text": "http://)|(https:",
                    "rendered": {
                      "text": "http://)|(https:",
                      "markdown": "`http://)|(https:`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.Core/Services/BBCodeService.cs"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20881,
                        "charLength": 16
                      },
                      "insertedContent": {
                        "text": "https://)|(https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-f00c4a3a-4b13-4922-9eca-2ab4fa3324d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/Areas/Forums/Pages/Admin/HostSettings.cshtml"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 12,
                  "endLine": 348,
                  "endColumn": 36,
                  "charOffset": 15793,
                  "charLength": 24,
                  "snippet": {
                    "text": "http://stopforumspam.com",
                    "rendered": {
                      "text": "http://stopforumspam.com",
                      "markdown": "`http://stopforumspam.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/Areas/Forums/Pages/Admin/HostSettings.cshtml"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15793,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "https://stopforumspam.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-0bbc0689-9b4c-4e40-89d4-9c30d6e199f8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/Areas/Forums/Pages/Admin/HostSettings.cshtml"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 12,
                  "endLine": 336,
                  "endColumn": 31,
                  "charOffset": 15347,
                  "charLength": 19,
                  "snippet": {
                    "text": "http://botscout.com",
                    "rendered": {
                      "text": "http://botscout.com",
                      "markdown": "`http://botscout.com`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/Areas/Forums/Pages/Admin/HostSettings.cshtml"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15347,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "https://botscout.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-966fd8b7-ca92-411e-bba4-c3fb905faaf8",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2261,
                  "endLine": 4,
                  "endColumn": 2288,
                  "charOffset": 100886,
                  "charLength": 27,
                  "snippet": {
                    "text": "setTimeout(()=>{this.init()",
                    "rendered": {
                      "text": "setTimeout(()=>{this.init()",
                      "markdown": "`setTimeout(()=>{this.init()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-bc5526ef-73f6-4801-a492-fe46f7c67550",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14358,
                  "endLine": 1,
                  "endColumn": 14397,
                  "charOffset": 14358,
                  "charLength": 39,
                  "snippet": {
                    "text": "setTimeout(()=>this._maybeEnableCycle()",
                    "rendered": {
                      "text": "setTimeout(()=>this._maybeEnableCycle()",
                      "markdown": "`setTimeout(()=>this._maybeEnableCycle()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-e744605f-9520-4e70-8415-cf62d8540c7e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.min.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 2410,
                  "endLine": 1,
                  "endColumn": 2433,
                  "charOffset": 2410,
                  "charLength": 23,
                  "snippet": {
                    "text": "setTimeout(()=>{t||F(s)",
                    "rendered": {
                      "text": "setTimeout(()=>{t||F(s)",
                      "markdown": "`setTimeout(()=>{t||F(s)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-97ec23d0-a5d5-470f-a76a-3313f7c4e019",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review eval for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/editor.comb.js"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 115,
                  "endLine": 597,
                  "endColumn": 76,
                  "charOffset": 23375,
                  "charLength": 261,
                  "snippet": {
                    "text": "eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">' + opts.item_template + \"</li>`\"));\r\n        if (!items.length) return hideLookup();\r\n        $lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")",
                    "rendered": {
                      "text": "eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">' + opts.item_template + \"</li>`\"));\r\n        if (!items.length) return hideLookup();\r\n        $lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")",
                      "markdown": "`eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">' + opts.item_template + \"</li>`\"));\r\n        if (!items.length) return hideLookup();\r\n        $lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Python.DangerousFunctionCall",
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall",
              "PHP.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-8f3ca138-33a4-4fed-9377-caa8922c18b9",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 13730,
                  "startColumn": 49,
                  "endLine": 13735,
                  "endColumn": 60,
                  "charOffset": 582868,
                  "charLength": 346,
                  "snippet": {
                    "text": "setTimeout(async () => {\r\n                            if (this._connectionState === HubConnectionState.Connected) {\r\n                                try {\r\n                                    await this._sendMessage(this._cachedPingMessage);\r\n                                } catch {\r\n                                    this._cleanupPingTimer()",
                    "rendered": {
                      "text": "setTimeout(async () => {\r\n                            if (this._connectionState === HubConnectionState.Connected) {\r\n                                try {\r\n                                    await this._sendMessage(this._cachedPingMessage);\r\n                                } catch {\r\n                                    this._cleanupPingTimer()",
                      "markdown": "`setTimeout(async () => {\r\n                            if (this._connectionState === HubConnectionState.Connected) {\r\n                                try {\r\n                                    await this._sendMessage(this._cachedPingMessage);\r\n                                } catch {\r\n                                    this._cleanupPingTimer()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-a76c941f-3981-4b69-802b-4f1c06986371",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 13724,
                  "startColumn": 42,
                  "endLine": 13724,
                  "endColumn": 79,
                  "charOffset": 582480,
                  "charLength": 37,
                  "snippet": {
                    "text": "setTimeout(() => this.serverTimeout()",
                    "rendered": {
                      "text": "setTimeout(() => this.serverTimeout()",
                      "markdown": "`setTimeout(() => this.serverTimeout()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-325b7387-5c62-4356-b4e8-1b6c59971e2f",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 13291,
                  "startColumn": 43,
                  "endLine": 13293,
                  "endColumn": 59,
                  "charOffset": 559881,
                  "charLength": 116,
                  "snippet": {
                    "text": "setTimeout(async () => {\r\n                        try {\r\n                            if (!this._reconnectInProgress)",
                    "rendered": {
                      "text": "setTimeout(async () => {\r\n                        try {\r\n                            if (!this._reconnectInProgress)",
                      "markdown": "`setTimeout(async () => {\r\n                        try {\r\n                            if (!this._reconnectInProgress)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-bcef4469-69f5-4603-b8d5-e71ff65fb382",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 12884,
                  "startColumn": 32,
                  "endLine": 12885,
                  "endColumn": 47,
                  "charOffset": 541131,
                  "charLength": 67,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n                        abortController.abort()",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n                        abortController.abort()",
                      "markdown": "`setTimeout(() => {\r\n                        abortController.abort()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-a93e2b10-69f7-4b2c-888a-a4a67af902a3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 11483,
                  "startColumn": 72,
                  "endLine": 11483,
                  "endColumn": 98,
                  "charOffset": 476311,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://via.placeholder.com",
                    "rendered": {
                      "text": "http://via.placeholder.com",
                      "markdown": "`http://via.placeholder.com`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 476311,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://via.placeholder.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-63e669aa-93e1-4caf-bc21-e3c07774c726",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 5887,
                  "startColumn": 12,
                  "endLine": 5888,
                  "endColumn": 27,
                  "charOffset": 251707,
                  "charLength": 47,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n                this.init()",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n                this.init()",
                      "markdown": "`setTimeout(() => {\r\n                this.init()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-4a703889-3ae5-4574-a4d4-88ec3a33fb6d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 4891,
                  "startColumn": 28,
                  "endLine": 4892,
                  "endColumn": 27,
                  "charOffset": 206922,
                  "charLength": 47,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n                this.hide()",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n                this.hide()",
                      "markdown": "`setTimeout(() => {\r\n                this.hide()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-ad9a4854-ada7-451e-aa3c-2011e0d29eb0",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 36,
                  "endLine": 966,
                  "endColumn": 77,
                  "charOffset": 39136,
                  "charLength": 41,
                  "snippet": {
                    "text": "setTimeout(() => this._maybeEnableCycle()",
                    "rendered": {
                      "text": "setTimeout(() => this._maybeEnableCycle()",
                      "markdown": "`setTimeout(() => this._maybeEnableCycle()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-d2557699-9d2a-4214-b7d4-7d18fcd7a366",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumAdminExtensions.js"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 8,
                  "endLine": 208,
                  "endColumn": 55,
                  "charOffset": 7829,
                  "charLength": 103,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)",
                      "markdown": "`setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-89ce687e-c0e0-418d-b45c-d4f1e10bbbc1",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/InstallWizard.comb.js"
                },
                "region": {
                  "startLine": 4891,
                  "startColumn": 28,
                  "endLine": 4892,
                  "endColumn": 27,
                  "charOffset": 206922,
                  "charLength": 47,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n                this.hide()",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n                this.hide()",
                      "markdown": "`setTimeout(() => {\r\n                this.hide()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-69b3ad8f-84d8-4f36-a6ca-d718965c7276",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/InstallWizard.comb.js"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 36,
                  "endLine": 966,
                  "endColumn": 77,
                  "charOffset": 39136,
                  "charLength": 41,
                  "snippet": {
                    "text": "setTimeout(() => this._maybeEnableCycle()",
                    "rendered": {
                      "text": "setTimeout(() => this._maybeEnableCycle()",
                      "markdown": "`setTimeout(() => this._maybeEnableCycle()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-e47c8c52-a9f2-4218-971a-29e45bd5922f",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/InstallWizard.comb.js"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 8,
                  "endLine": 208,
                  "endColumn": 55,
                  "charOffset": 7829,
                  "charLength": 103,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)",
                      "markdown": "`setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-0460f494-9de5-4605-8156-f8f38c9f48ba",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 44209,
                  "endLine": 9,
                  "endColumn": 44223,
                  "charOffset": 44433,
                  "charLength": 14,
                  "snippet": {
                    "text": "setTimeout((()",
                    "rendered": {
                      "text": "setTimeout((()",
                      "markdown": "`setTimeout((()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-fdedd992-4784-4def-90f9-a3641d08e7cc",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 43794,
                  "endLine": 9,
                  "endColumn": 43945,
                  "charOffset": 44018,
                  "charLength": 151,
                  "snippet": {
                    "text": "setTimeout((()=>{var e;const t=document.querySelector(`[data-mds-dtp-guid=\"${this.guid}\"]`);null!=t&&(null===(e=t.querySelector(\"[data-mds-dtp-time]\"))",
                    "rendered": {
                      "text": "setTimeout((()=>{var e;const t=document.querySelector(`[data-mds-dtp-guid=\"${this.guid}\"]`);null!=t&&(null===(e=t.querySelector(\"[data-mds-dtp-time]\"))",
                      "markdown": "`setTimeout((()=>{var e;const t=document.querySelector(`[data-mds-dtp-guid=\"${this.guid}\"]`);null!=t&&(null===(e=t.querySelector(\"[data-mds-dtp-time]\"))`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-d702091c-5b79-45e9-ae46-37a52300be93",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14835,
                  "endLine": 9,
                  "endColumn": 14913,
                  "charOffset": 15059,
                  "charLength": 78,
                  "snippet": {
                    "text": "setTimeout((()=>{const e=this.getModal();null!=e&&(this.bsModal=new n.Modal(e)",
                    "rendered": {
                      "text": "setTimeout((()=>{const e=this.getModal();null!=e&&(this.bsModal=new n.Modal(e)",
                      "markdown": "`setTimeout((()=>{const e=this.getModal();null!=e&&(this.bsModal=new n.Modal(e)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-183bf076-ae96-4cc1-a9d2-5e7cc98129ca",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14415,
                  "endLine": 9,
                  "endColumn": 14524,
                  "charOffset": 14639,
                  "charLength": 109,
                  "snippet": {
                    "text": "setTimeout((()=>{this.dispose();const t=this.getPopoverHeaderTitle(e);let a=this.getDateTimePickerBodyHtml(e)",
                    "rendered": {
                      "text": "setTimeout((()=>{this.dispose();const t=this.getPopoverHeaderTitle(e);let a=this.getDateTimePickerBodyHtml(e)",
                      "markdown": "`setTimeout((()=>{this.dispose();const t=this.getPopoverHeaderTitle(e);let a=this.getDateTimePickerBodyHtml(e)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-17d3044f-4e18-468d-b4ec-5307e133fc66",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 3063,
                  "endLine": 9,
                  "endColumn": 3077,
                  "charOffset": 3287,
                  "charLength": 14,
                  "snippet": {
                    "text": "setTimeout((()",
                    "rendered": {
                      "text": "setTimeout((()",
                      "markdown": "`setTimeout((()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-3eb63b8c-c74e-46d2-84c0-0571126b1022",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/InstallWizard.comb.min.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14358,
                  "endLine": 1,
                  "endColumn": 14397,
                  "charOffset": 14358,
                  "charLength": 39,
                  "snippet": {
                    "text": "setTimeout(()=>this._maybeEnableCycle()",
                    "rendered": {
                      "text": "setTimeout(()=>this._maybeEnableCycle()",
                      "markdown": "`setTimeout(()=>this._maybeEnableCycle()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-652eadc5-7a40-434a-86c7-1e5e46e2413d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/InstallWizard.comb.min.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 2410,
                  "endLine": 1,
                  "endColumn": 2433,
                  "charOffset": 2410,
                  "charLength": 23,
                  "snippet": {
                    "text": "setTimeout(()=>{t||B(s)",
                    "rendered": {
                      "text": "setTimeout(()=>{t||B(s)",
                      "markdown": "`setTimeout(()=>{t||B(s)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-dda49357-036a-4e69-8a9e-65025e676156",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review eval for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/editor.min.js"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 4807,
                  "endLine": 42,
                  "endColumn": 5041,
                  "charOffset": 12896,
                  "charLength": 234,
                  "snippet": {
                    "text": "eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">'+opts.item_template+\"</li>`\")));if(!items.length)return hideLookup();$lookup.innerHTML=`<ul class=\"dropdown-menu show\">${items.join(\"\")",
                    "rendered": {
                      "text": "eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">'+opts.item_template+\"</li>`\")));if(!items.length)return hideLookup();$lookup.innerHTML=`<ul class=\"dropdown-menu show\">${items.join(\"\")",
                      "markdown": "`eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">'+opts.item_template+\"</li>`\")));if(!items.length)return hideLookup();$lookup.innerHTML=`<ul class=\"dropdown-menu show\">${items.join(\"\")`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Python.DangerousFunctionCall",
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall",
              "PHP.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-bad32b3a-3efa-4b3c-a660-4ab5ab42e232",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 13730,
                  "startColumn": 49,
                  "endLine": 13735,
                  "endColumn": 60,
                  "charOffset": 582868,
                  "charLength": 346,
                  "snippet": {
                    "text": "setTimeout(async () => {\r\n                            if (this._connectionState === HubConnectionState.Connected) {\r\n                                try {\r\n                                    await this._sendMessage(this._cachedPingMessage);\r\n                                } catch {\r\n                                    this._cleanupPingTimer()",
                    "rendered": {
                      "text": "setTimeout(async () => {\r\n                            if (this._connectionState === HubConnectionState.Connected) {\r\n                                try {\r\n                                    await this._sendMessage(this._cachedPingMessage);\r\n                                } catch {\r\n                                    this._cleanupPingTimer()",
                      "markdown": "`setTimeout(async () => {\r\n                            if (this._connectionState === HubConnectionState.Connected) {\r\n                                try {\r\n                                    await this._sendMessage(this._cachedPingMessage);\r\n                                } catch {\r\n                                    this._cleanupPingTimer()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-38b2a047-943d-4ab5-96c5-2e5696c94c24",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 13724,
                  "startColumn": 42,
                  "endLine": 13724,
                  "endColumn": 79,
                  "charOffset": 582480,
                  "charLength": 37,
                  "snippet": {
                    "text": "setTimeout(() => this.serverTimeout()",
                    "rendered": {
                      "text": "setTimeout(() => this.serverTimeout()",
                      "markdown": "`setTimeout(() => this.serverTimeout()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-c5e42426-3490-4ccb-b98c-b476ed8b72f0",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 13291,
                  "startColumn": 43,
                  "endLine": 13293,
                  "endColumn": 59,
                  "charOffset": 559881,
                  "charLength": 116,
                  "snippet": {
                    "text": "setTimeout(async () => {\r\n                        try {\r\n                            if (!this._reconnectInProgress)",
                    "rendered": {
                      "text": "setTimeout(async () => {\r\n                        try {\r\n                            if (!this._reconnectInProgress)",
                      "markdown": "`setTimeout(async () => {\r\n                        try {\r\n                            if (!this._reconnectInProgress)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-042d5490-358b-4ace-88b0-cd622ec9042e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 12884,
                  "startColumn": 32,
                  "endLine": 12885,
                  "endColumn": 47,
                  "charOffset": 541131,
                  "charLength": 67,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n                        abortController.abort()",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n                        abortController.abort()",
                      "markdown": "`setTimeout(() => {\r\n                        abortController.abort()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-e4201e32-bd8a-485b-a6fb-ecd1b954c187",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 11483,
                  "startColumn": 72,
                  "endLine": 11483,
                  "endColumn": 98,
                  "charOffset": 476311,
                  "charLength": 26,
                  "snippet": {
                    "text": "http://via.placeholder.com",
                    "rendered": {
                      "text": "http://via.placeholder.com",
                      "markdown": "`http://via.placeholder.com`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 476311,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "https://via.placeholder.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-fef0114d-6f8f-4fda-9700-db4dc6e442fc",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 5887,
                  "startColumn": 12,
                  "endLine": 5888,
                  "endColumn": 27,
                  "charOffset": 251707,
                  "charLength": 47,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n                this.init()",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n                this.init()",
                      "markdown": "`setTimeout(() => {\r\n                this.init()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-df28507a-ace9-49c0-bfaa-d6a7a6312f31",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 4891,
                  "startColumn": 28,
                  "endLine": 4892,
                  "endColumn": 27,
                  "charOffset": 206922,
                  "charLength": 47,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n                this.hide()",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n                this.hide()",
                      "markdown": "`setTimeout(() => {\r\n                this.hide()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-4d77b4a7-03fd-4475-aa04-c7322faca5ff",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 36,
                  "endLine": 966,
                  "endColumn": 77,
                  "charOffset": 39136,
                  "charLength": 41,
                  "snippet": {
                    "text": "setTimeout(() => this._maybeEnableCycle()",
                    "rendered": {
                      "text": "setTimeout(() => this._maybeEnableCycle()",
                      "markdown": "`setTimeout(() => this._maybeEnableCycle()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-5b9d63ca-432f-4c93-bacc-97e4a905033e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/forumExtensions.js"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 8,
                  "endLine": 208,
                  "endColumn": 55,
                  "charOffset": 7829,
                  "charLength": 103,
                  "snippet": {
                    "text": "setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)",
                    "rendered": {
                      "text": "setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)",
                      "markdown": "`setTimeout(() => {\r\n            if (!called) {\r\n                triggerTransitionEnd(transitionElement)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-6a61fa84-c0fa-408c-921b-cf973023842a",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review eval for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/sceditor/sceditor.min.js"
                },
                "region": {
                  "startLine": 3515,
                  "startColumn": 115,
                  "endLine": 3517,
                  "endColumn": 76,
                  "charOffset": 173974,
                  "charLength": 261,
                  "snippet": {
                    "text": "eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">' + opts.item_template + \"</li>`\"));\r\n        if (!items.length) return hideLookup();\r\n        $lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")",
                    "rendered": {
                      "text": "eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">' + opts.item_template + \"</li>`\"));\r\n        if (!items.length) return hideLookup();\r\n        $lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")",
                      "markdown": "`eval('`<li class=\"mention-li-nt ${opts.lookup}\" data-name = \"${item.name}\" data-id = \"${item.id}\">' + opts.item_template + \"</li>`\"));\r\n        if (!items.length) return hideLookup();\r\n        $lookup.innerHTML = `<ul class=\"dropdown-menu show\">${items.join(\"\")`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Python.DangerousFunctionCall",
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall",
              "PHP.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-ab1fa006-4544-40cc-ba19-d102093429ab",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/sceditor/sceditor.min.js"
                },
                "region": {
                  "startLine": 2161,
                  "startColumn": 54,
                  "endLine": 2162,
                  "endColumn": 24,
                  "charOffset": 116421,
                  "charLength": 49,
                  "snippet": {
                    "text": "setTimeout(function() {\r\n                f || k()",
                    "rendered": {
                      "text": "setTimeout(function() {\r\n                f || k()",
                      "markdown": "`setTimeout(function() {\r\n                f || k()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-6f92ed42-19b9-477e-9c9f-8b1147cac3d7",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YAFNET.UI/YAFNET.RazorPages/wwwroot/js/sceditor/sceditor.min.js"
                },
                "region": {
                  "startLine": 1783,
                  "startColumn": 16,
                  "endLine": 1783,
                  "endColumn": 37,
                  "charOffset": 97279,
                  "charLength": 21,
                  "snippet": {
                    "text": "setTimeout(function()",
                    "rendered": {
                      "text": "setTimeout(function()",
                      "markdown": "`setTimeout(function()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-4894fd97-b595-49bc-a5ee-f0d3a380e925",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 44209,
                  "endLine": 9,
                  "endColumn": 44223,
                  "charOffset": 44433,
                  "charLength": 14,
                  "snippet": {
                    "text": "setTimeout((()",
                    "rendered": {
                      "text": "setTimeout((()",
                      "markdown": "`setTimeout((()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-f3830da4-8cd4-4f19-9bcc-c5e04b122672",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 43794,
                  "endLine": 9,
                  "endColumn": 43945,
                  "charOffset": 44018,
                  "charLength": 151,
                  "snippet": {
                    "text": "setTimeout((()=>{var e;const t=document.querySelector(`[data-mds-dtp-guid=\"${this.guid}\"]`);null!=t&&(null===(e=t.querySelector(\"[data-mds-dtp-time]\"))",
                    "rendered": {
                      "text": "setTimeout((()=>{var e;const t=document.querySelector(`[data-mds-dtp-guid=\"${this.guid}\"]`);null!=t&&(null===(e=t.querySelector(\"[data-mds-dtp-time]\"))",
                      "markdown": "`setTimeout((()=>{var e;const t=document.querySelector(`[data-mds-dtp-guid=\"${this.guid}\"]`);null!=t&&(null===(e=t.querySelector(\"[data-mds-dtp-time]\"))`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-2e0ea847-b693-4f8b-bb1a-b506ad8e568b",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14835,
                  "endLine": 9,
                  "endColumn": 14913,
                  "charOffset": 15059,
                  "charLength": 78,
                  "snippet": {
                    "text": "setTimeout((()=>{const e=this.getModal();null!=e&&(this.bsModal=new n.Modal(e)",
                    "rendered": {
                      "text": "setTimeout((()=>{const e=this.getModal();null!=e&&(this.bsModal=new n.Modal(e)",
                      "markdown": "`setTimeout((()=>{const e=this.getModal();null!=e&&(this.bsModal=new n.Modal(e)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-d088e842-13b6-4c76-82d4-07f54c193e9a",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14415,
                  "endLine": 9,
                  "endColumn": 14524,
                  "charOffset": 14639,
                  "charLength": 109,
                  "snippet": {
                    "text": "setTimeout((()=>{this.dispose();const t=this.getPopoverHeaderTitle(e);let a=this.getDateTimePickerBodyHtml(e)",
                    "rendered": {
                      "text": "setTimeout((()=>{this.dispose();const t=this.getPopoverHeaderTitle(e);let a=this.getDateTimePickerBodyHtml(e)",
                      "markdown": "`setTimeout((()=>{this.dispose();const t=this.getPopoverHeaderTitle(e);let a=this.getDateTimePickerBodyHtml(e)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        },
        {
          "ruleId": "glog-724fa629-ff4a-4bad-ac6a-246163a5233b",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Review setTimeout for untrusted data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "yafsrc/YetAnotherForum.NET/wwwroot/js/mds.datetimepicker.min.js"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 3063,
                  "endLine": 9,
                  "endColumn": 3077,
                  "charOffset": 3287,
                  "charLength": 14,
                  "snippet": {
                    "text": "setTimeout((()",
                    "rendered": {
                      "text": "setTimeout((()",
                      "markdown": "`setTimeout((()`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "JavaScript.DangerousFunctionCall",
              "TypeScript.DangerousFunctionCall"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}